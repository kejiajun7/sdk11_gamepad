<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\nrf51422_xxac_s130.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\nrf51422_xxac_s130.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Wed Dec 27 16:47:17 2017
<BR><P>
<H3>Maximum Stack Usage =        536 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; ble_hid_app_start &rArr; services_init &rArr; hids_init &rArr; ble_hids_init &rArr; inp_rep_characteristics_add &rArr; rep_char_add &rArr; ble_srv_report_ref_encode &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">PendSV_Handler</a><BR>
 <LI><a href="#[8]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SysTick_Handler</a><BR>
 <LI><a href="#[17]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[57]">__asm___20_app_timer_ble_gzll_c_cd27f9c3__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[57]">__asm___20_app_timer_ble_gzll_c_cd27f9c3__nrf_delay_us</a><BR>
 <LI><a href="#[59]">__asm___15_nrf_link_core_c_b93f5dba__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[59]">__asm___15_nrf_link_core_c_b93f5dba__nrf_delay_us</a><BR>
 <LI><a href="#[58]">__asm___24_nrf_gzp_device___Judge_c_gzp_init__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[58]">__asm___24_nrf_gzp_device___Judge_c_gzp_init__nrf_delay_us</a><BR>
 <LI><a href="#[56]">__asm___11_nrf_delay_c_532987f3__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[56]">__asm___11_nrf_delay_c_532987f3__nrf_delay_us</a><BR>
 <LI><a href="#[c2]">app_notify_error_state_transit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c4]">sm_state_change</a><BR>
 <LI><a href="#[13f]">cmd_queue_dequeue</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13d]">cmd_process</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[f]">ADC_IRQHandler</a> from nrf_drv_adc.o(i.ADC_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[17]">CCM_AAR_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[16]">ECB_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[e]">GPIOTE_IRQHandler</a> from nrf_drv_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[3c]">LED_FALSH_handler</a> from ble_app_gzll_ui.o(i.LED_FALSH_handler) referenced from main.o(i.timers_init_and_start)
 <LI><a href="#[1b]">LPCOMP_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[9]">POWER_CLOCK_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[7]">PendSV_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1a]">QDEC_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[a]">RADIO_IRQHandler</a> from nrf_link_core.o(i.RADIO_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[15]">RNG_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[13]">RTC0_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[19]">RTC1_IRQHandler</a> from app_timer_ble_gzll.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[c]">SPI0_TWI0_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[d]">SPI1_TWI1_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1c]">SWI0_IRQHandler</a> from nrf_notification_manager.o(i.SWI0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1d]">SWI1_IRQHandler</a> from app_timer_ble_gzll.o(i.SWI1_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1e]">SWI2_IRQHandler</a> from softdevice_handler.o(i.SWI2_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1f]">SWI3_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[20]">SWI4_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[21]">SWI5_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[8]">SysTick_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[23]">SystemInit</a> from system_nrf51.o(i.SystemInit) referenced from arm_startup_nrf51.o(.text)
 <LI><a href="#[14]">TEMP_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[10]">TIMER0_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[11]">TIMER1_IRQHandler</a> from nrf_drv_timer.o(i.TIMER1_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[12]">TIMER2_IRQHandler</a> from nrf_flywheel.o(i.TIMER2_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[b]">UART0_IRQHandler</a> from nrf_drv_uart.o(i.UART0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[18]">WDT_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[24]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf51.o(.text)
 <LI><a href="#[25]">adc_event_handler</a> from ble_app_adc.o(i.adc_event_handler) referenced from ble_app_adc.o(i.adc_config)
 <LI><a href="#[2b]">async_state_packet_received</a> from nrf_impala.o(i.async_state_packet_received) referenced from nrf_impala.o(i.async_state_rx_enabling)
 <LI><a href="#[2a]">async_state_tx_ack_complete</a> from nrf_impala.o(i.async_state_tx_ack_complete) referenced from nrf_impala.o(i.async_state_packet_received)
 <LI><a href="#[29]">battery_level_meas_timeout_handler</a> from ble_app_gzll_hid.o(i.battery_level_meas_timeout_handler) referenced from ble_app_gzll_hid.o(i.application_timers_start)
 <LI><a href="#[27]">ble_advertising_error_handler</a> from ble_app_gzll_hid.o(i.ble_advertising_error_handler) referenced from ble_app_gzll_hid.o(i.advertising_init)
 <LI><a href="#[2d]">ble_evt_dispatch</a> from ble_app_gzll_hid.o(i.ble_evt_dispatch) referenced from ble_app_gzll_hid.o(i.ble_stack_init)
 <LI><a href="#[3d]">bsp_button_event_handler</a> from bsp.o(i.bsp_button_event_handler) referenced 4 times from bsp.o(.constdata)
 <LI><a href="#[2f]">conn_params_error_handler</a> from ble_app_gzll_hid.o(i.conn_params_error_handler) referenced from ble_app_gzll_hid.o(i.conn_params_init)
 <LI><a href="#[51]">data_page_erase_state_run</a> from pstorage.o(i.data_page_erase_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[50]">data_to_swap_write_state_run</a> from pstorage.o(i.data_to_swap_write_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[39]">device_ack_received</a> from nrf_impala.o(i.device_ack_received) referenced from nrf_impala.o(i.nrf_impl_state_fun_timeslot_start)
 <LI><a href="#[33]">device_manager_evt_handler</a> from ble_app_gzll_hid.o(i.device_manager_evt_handler) referenced from ble_app_gzll_hid.o(i.device_manager_init)
 <LI><a href="#[34]">dm_pstorage_cb_handler</a> from device_manager_peripheral.o(i.dm_pstorage_cb_handler) referenced from device_manager_peripheral.o(i.dm_init)
 <LI><a href="#[48]">gattc_context_apply</a> from device_manager_peripheral.o(i.gattc_context_apply) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[44]">gattc_context_load</a> from device_manager_peripheral.o(i.gattc_context_load) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[40]">gattc_context_store</a> from device_manager_peripheral.o(i.gattc_context_store) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[47]">gatts_context_apply</a> from device_manager_peripheral.o(i.gatts_context_apply) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[43]">gatts_context_load</a> from device_manager_peripheral.o(i.gatts_context_load) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[3f]">gatts_context_store</a> from device_manager_peripheral.o(i.gatts_context_store) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[49]">gattsc_context_apply</a> from device_manager_peripheral.o(i.gattsc_context_apply) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[45]">gattsc_context_load</a> from device_manager_peripheral.o(i.gattsc_context_load) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[41]">gattsc_context_store</a> from device_manager_peripheral.o(i.gattsc_context_store) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[53]">head_restore_state_run</a> from pstorage.o(i.head_restore_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[22]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[46]">no_service_context_apply</a> from device_manager_peripheral.o(i.no_service_context_apply) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[42]">no_service_context_load</a> from device_manager_peripheral.o(i.no_service_context_load) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[3e]">no_service_context_store</a> from device_manager_peripheral.o(i.no_service_context_store) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[37]">notification_cb</a> from nrf_gzll.o(i.notification_cb) referenced from nrf_gzll.o(i.nrf_gzll_init)
 <LI><a href="#[2]">nrf_impl_state_fun_device_send_packet</a> from nrf_impala.o(i.nrf_impl_state_fun_device_send_packet) referenced 2 times from nrf_state_machine.o(.data)
 <LI><a href="#[1]">nrf_impl_state_fun_timeslot_start</a> from nrf_impala.o(i.nrf_impl_state_fun_timeslot_start) referenced 2 times from nrf_state_machine.o(.data)
 <LI><a href="#[38]">nrf_sm_execute</a> from nrf_state_machine.o(i.nrf_sm_execute) referenced from nrf_impala.o(i.nrf_impl_state_fun_device_send_packet)
 <LI><a href="#[38]">nrf_sm_execute</a> from nrf_state_machine.o(i.nrf_sm_execute) referenced 2 times from nrf_impala.o(i.nrf_impl_state_fun_timeslot_start)
 <LI><a href="#[38]">nrf_sm_execute</a> from nrf_state_machine.o(i.nrf_sm_execute) referenced from nrf_impala.o(i.sm_start)
 <LI><a href="#[3a]">nus_data_handler</a> from ble_app_gzll_hid.o(i.nus_data_handler) referenced from ble_app_gzll_hid.o(i.nus_init)
 <LI><a href="#[28]">on_adv_evt</a> from ble_app_gzll_hid.o(i.on_adv_evt) referenced from ble_app_gzll_hid.o(i.advertising_init)
 <LI><a href="#[35]">on_hids_evt</a> from ble_app_gzll_hid.o(i.on_hids_evt) referenced from ble_app_gzll_hid.o(i.hids_init)
 <LI><a href="#[31]">pstorage_store</a> from pstorage.o(i.pstorage_store) referenced from device_manager_peripheral.o(i.device_context_store)
 <LI><a href="#[31]">pstorage_store</a> from pstorage.o(i.pstorage_store) referenced from device_manager_peripheral.o(i.gatts_context_store)
 <LI><a href="#[30]">pstorage_update</a> from pstorage.o(i.pstorage_update) referenced from device_manager_peripheral.o(i.device_context_store)
 <LI><a href="#[30]">pstorage_update</a> from pstorage.o(i.pstorage_update) referenced from device_manager_peripheral.o(i.gatts_context_store)
 <LI><a href="#[36]">service_error_handler</a> from ble_app_gzll_hid.o(i.service_error_handler) referenced from ble_app_gzll_hid.o(i.hids_init)
 <LI><a href="#[3b]">softdevice_fault_handler</a> from softdevice_handler.o(i.softdevice_fault_handler) referenced from softdevice_handler.o(i.softdevice_handler_init)
 <LI><a href="#[4c]">state_erase_data_page_entry_run</a> from pstorage.o(i.state_erase_data_page_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[4e]">state_restore_head_entry_run</a> from pstorage.o(i.state_restore_head_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[4d]">state_restore_tail_entry_run</a> from pstorage.o(i.state_restore_tail_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[4a]">state_swap_erase_entry_run</a> from pstorage.o(i.state_swap_erase_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[4b]">state_write_data_swap_entry_run</a> from pstorage.o(i.state_write_data_swap_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[32]">storage_operation_dummy_handler</a> from device_manager_peripheral.o(i.storage_operation_dummy_handler) referenced from device_manager_peripheral.o(i.device_context_store)
 <LI><a href="#[4f]">swap_erase_state_run</a> from pstorage.o(i.swap_erase_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[2e]">sys_evt_dispatch</a> from ble_app_gzll_hid.o(i.sys_evt_dispatch) referenced from ble_app_gzll_hid.o(i.ble_stack_init)
 <LI><a href="#[52]">tail_restore_state_run</a> from pstorage.o(i.tail_restore_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[26]">timer_handler</a> from ble_app_adc.o(i.timer_handler) referenced from ble_app_adc.o(i.adc_sampling_event_init)
 <LI><a href="#[2c]">update_timeout_handler</a> from ble_conn_params.o(i.update_timeout_handler) referenced from ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[24]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(.text)
</UL>
<P><STRONG><a name="[261]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[54]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[67]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[262]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[263]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[264]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[265]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[266]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[56]"></a>__asm___11_nrf_delay_c_532987f3__nrf_delay_us</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_delay.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_nrf_delay_c_532987f3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_nrf_delay_c_532987f3__nrf_delay_us
</UL>

<P><STRONG><a name="[57]"></a>__asm___20_app_timer_ble_gzll_c_cd27f9c3__nrf_delay_us</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_timer_ble_gzll.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___20_app_timer_ble_gzll_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___20_app_timer_ble_gzll_c_cd27f9c3__nrf_delay_us
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>

<P><STRONG><a name="[58]"></a>__asm___24_nrf_gzp_device___Judge_c_gzp_init__nrf_delay_us</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_gzp_device - judge.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___24_nrf_gzp_device___Judge_c_gzp_init__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_delay_rx_periods
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___24_nrf_gzp_device___Judge_c_gzp_init__nrf_delay_us
</UL>

<P><STRONG><a name="[59]"></a>__asm___15_nrf_link_core_c_b93f5dba__nrf_delay_us</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_link_core.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_nrf_link_core_c_b93f5dba__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_force_disable
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_nrf_link_core_c_b93f5dba__nrf_delay_us
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SPI0_TWI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SWI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SWI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SWI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[267]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_swap_erase_entry_run
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_tail_entry_run
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_data_erase_swap_entry_run
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_tail_data_page_swap_required
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[268]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_update
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_change_data_calculate
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_register
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_word_size_calculate
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_generate_channels
</UL>

<P><STRONG><a name="[269]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_evt_handler
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_channel_table
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_add_packet_to_tx_fifo
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_address_req_send
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_addr_encode
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_service_context_set
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_register
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_peer_addr_get
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_allocate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_fetch_packet_from_rx_fifo
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_device_tx_success
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_device_tx_failed
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_set_host_id
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_params_store
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_params_db_read
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_init_Judge
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_init_Judge
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_store
</UL>

<P><STRONG><a name="[26a]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_start_prx
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[26d]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_peer_address_clear
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_instance_init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_instance_init
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bas_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_char_add
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable_get_default_config
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_char_add
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_char_add
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_store
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rep_map_char_add
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rep_char_add
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_mode_char_add
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_information_char_add
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_control_point_char_add
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_kb_outp_rep_char_add
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_inp_rep_char_add
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
</UL>

<P><STRONG><a name="[26f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[124]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_ascii_to_utf8
</UL>

<P><STRONG><a name="[15e]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_store
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_find
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_params_store
</UL>

<P><STRONG><a name="[90]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_update
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_update
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_update
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[270]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[271]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[60]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[55]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[272]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[273]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[275]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[f]"></a>ADC_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, nrf_drv_adc.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_IRQHandler &rArr; adc_sample_process
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_int_disable
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_event_clear
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>BETOP_switch_check</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ble_app_gzll_ui.o(i.BETOP_switch_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BETOP_switch_check &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pins_read
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_read_pin_state
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 486 bytes, Stack size 64 bytes, nrf_drv_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GPIOTE_IRQHandler &rArr; nrf_gpiote_event_is_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>LED_FALSH_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ble_app_gzll_ui.o(i.LED_FALSH_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LED_FALSH_handler &rArr; LED_FALSH_update
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_FALSH_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.timers_init_and_start)
</UL>
<P><STRONG><a name="[74]"></a>LED_FALSH_update</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, ble_app_gzll_ui.o(i.LED_FALSH_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_FALSH_update
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_FALSH_handler
</UL>

<P><STRONG><a name="[77]"></a>NRF_ASSERT_INTERNAL_parse_and_forward</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_assert_internal.o(i.NRF_ASSERT_INTERNAL_parse_and_forward))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_assert_internal_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_add_packet_to_tx_fifo
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sm_set_next_state
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_start_ptx
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_start_prx
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_ptx
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_prx
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nm_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nm_add
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_start_operation
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_prepare_operation
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_set_current_timeslot
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_set_current_channel_index
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_get_current_channel
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_flw_prepare_call
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_device_send_packet
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_rx_enabling
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_packet_received
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mode
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nrf_impl_restore_all_hw_params
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_disable
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_ack_received
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_prefix_byte
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_channel_table
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_flush_tx_fifo
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_enable_rssi
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_enable
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notification_cb
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_fetch_packet_from_rx_fifo
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_reserve_packet
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_read_packet
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_put_packet
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_pop_packet
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_get_packet_count
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_free_packet
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_flush
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_IRQHandler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_handler_rx_enable_start_tx_enable_start_disable
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>

<P><STRONG><a name="[79]"></a>NRF_flw_prepare_call</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, nrf_flywheel.o(i.NRF_flw_prepare_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NRF_flw_prepare_call &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_device_send_packet
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start
</UL>

<P><STRONG><a name="[a]"></a>RADIO_IRQHandler</STRONG> (Thumb, 382 bytes, Stack size 24 bytes, nrf_link_core.o(i.RADIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RADIO_IRQHandler &rArr; nrf_lcore_handler_rx_enable_start_tx_enable_start_disable &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_handler_rx_enable_start_tx_enable_start_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RTC1_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_timer_ble_gzll.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = RTC1_IRQHandler &rArr; timer_timeouts_check &rArr; timeout_handler_exec &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>SEGGER_RTT_ConfigDownBuffer</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, segger_rtt.o(i.SEGGER_RTT_ConfigDownBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SEGGER_RTT_ConfigDownBuffer &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_init
</UL>

<P><STRONG><a name="[7e]"></a>SEGGER_RTT_ConfigUpBuffer</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, segger_rtt.o(i.SEGGER_RTT_ConfigUpBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SEGGER_RTT_ConfigUpBuffer &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_init
</UL>

<P><STRONG><a name="[7f]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, segger_rtt.o(i.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>

<P><STRONG><a name="[80]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[84]"></a>SEGGER_RTT_vprintf</STRONG> (Thumb, 536 bytes, Stack size 136 bytes, segger_rtt_printf.o(i.SEGGER_RTT_vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
</UL>

<P><STRONG><a name="[1c]"></a>SWI0_IRQHandler</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, nrf_notification_manager.o(i.SWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SWI0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SWI1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_timer_ble_gzll.o(i.SWI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SWI1_IRQHandler &rArr; timer_list_handler &rArr; list_deletions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SWI2_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, softdevice_handler.o(i.SWI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SWI2_IRQHandler &rArr; intern_softdevice_events_execute &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SystemInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, system_nrf51.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_peripheral_domain_setup_needed
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_manual_peripheral_setup_needed
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_disabled_in_debug_needed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(.text)
</UL>
<P><STRONG><a name="[11]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_timer.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER1_IRQHandler &rArr; irq_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, nrf_flywheel.o(i.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER2_IRQHandler &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>UART0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART0_IRQHandler &rArr; uart_irq_handler &rArr; rx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[135]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ble_app_gzll_device.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mouse_and_send2
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mouse_and_send_change
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[276]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[277]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[278]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[92]"></a>adc_change_data_calculate</STRONG> (Thumb, 1102 bytes, Stack size 8 bytes, ble_app_adc.o(i.adc_change_data_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = adc_change_data_calculate &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mouse_and_send2
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_manage
</UL>

<P><STRONG><a name="[96]"></a>adc_disinit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_app_adc.o(i.adc_disinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = adc_disinit &rArr; nrf_drv_ppi_channel_disable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_uninit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_disable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_uninit
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_syetem_off
</UL>

<P><STRONG><a name="[9b]"></a>adc_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ble_app_adc.o(i.adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = adc_init &rArr; adc_sampling_event_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_buffer_convert
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sampling_event_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sampling_event_enable
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a6]"></a>adv_data_encode</STRONG> (Thumb, 500 bytes, Stack size 40 bytes, ble_advdata.o(i.adv_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_power_level_encode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_value_encode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_mgr_oob_flags_encode
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_encode
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_role_encode
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_encode
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_addr_encode
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appearance_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[ba]"></a>app_error_fault_handler</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_save_and_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_fault_handler
</UL>

<P><STRONG><a name="[89]"></a>app_error_handler</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, app_error.o(i.app_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_error_handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_prepare
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hids_evt
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hid_rep_char_write
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_evt_handler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_error_handler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_error_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_update
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bas_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_timers_start
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_stop
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_sense_turbo
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_stop
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hid_app_stop
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init_and_start
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_manage
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_report_ref_encode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sampling_event_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sampling_event_enable
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_event_handler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_hid_information
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_id_encode
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnp_id_encode
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler_exec
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_IRQHandler
</UL>

<P><STRONG><a name="[bc]"></a>app_error_save_and_stop</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, app_error.o(i.app_error_save_and_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = app_error_save_and_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[bd]"></a>app_fifo_get</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_fifo.o(i.app_fifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_fifo_get &rArr; fifo_get &rArr; fifo_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_length
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>

<P><STRONG><a name="[c0]"></a>app_fifo_put</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, app_fifo.o(i.app_fifo_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_fifo_put
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_put
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_length
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>

<P><STRONG><a name="[db]"></a>app_timer_create</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, app_timer_ble_gzll.o(i.app_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_timers_start
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init_and_start
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
</UL>

<P><STRONG><a name="[c5]"></a>app_timer_init</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, app_timer_ble_gzll.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_timer_init &rArr; rtc1_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init_and_start
</UL>

<P><STRONG><a name="[cc]"></a>app_timer_start</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, app_timer_ble_gzll.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_id_get
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_timers_start
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init_and_start
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
</UL>

<P><STRONG><a name="[cf]"></a>app_timer_stop</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, app_timer_ble_gzll.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_timer_stop &rArr; timer_stop_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_id_get
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hid_app_stop
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_stop
</UL>

<P><STRONG><a name="[d1]"></a>app_timer_stop_all</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_timer_ble_gzll.o(i.app_timer_stop_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_timer_stop_all &rArr; timer_stop_all_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_id_get
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_all_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_sense_turbo
</UL>

<P><STRONG><a name="[d3]"></a>app_uart_put</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, app_uart_fifo.o(i.app_uart_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_uart_put &rArr; app_fifo_get &rArr; fifo_get &rArr; fifo_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_in_progress
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
</UL>

<P><STRONG><a name="[d6]"></a>app_util_critical_region_enter</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_alloc
</UL>

<P><STRONG><a name="[d8]"></a>app_util_critical_region_exit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_alloc
</UL>

<P><STRONG><a name="[2b]"></a>async_state_packet_received</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, nrf_impala.o(i.async_state_packet_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = async_state_packet_received &rArr; nrf_pm_end_prx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_rx_fifo_status
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_prx
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nm_add
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_force_disable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_rx_enabling
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_impala.o(i.async_state_rx_enabling)
</UL>
<P><STRONG><a name="[e0]"></a>async_state_rx_enabling</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, nrf_impala.o(i.async_state_rx_enabling))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = async_state_rx_enabling &rArr; nrf_pm_start_prx &rArr; nrf_fifo_reserve_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_start_prx
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_state
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nm_get_remaining_space_in_notification_queue
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_start_operation
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_prepare_operation
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_force_disable
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_tx_ack_complete
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_packet_received
</UL>

<P><STRONG><a name="[2a]"></a>async_state_tx_ack_complete</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_impala.o(i.async_state_tx_ack_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = async_state_tx_ack_complete &rArr; async_state_rx_enabling &rArr; nrf_pm_start_prx &rArr; nrf_fifo_reserve_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_rx_enabling
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_impala.o(i.async_state_packet_received)
</UL>
<P><STRONG><a name="[ec]"></a>ble_advdata_set</STRONG> (Thumb, 152 bytes, Stack size 104 bytes, ble_advdata.o(i.ble_advdata_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srdata_check
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advdata_check
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[b6]"></a>ble_advertising_init</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, ble_advertising.o(i.ble_advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_peer_address_clear
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>

<P><STRONG><a name="[f0]"></a>ble_advertising_on_ble_evt</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, ble_advertising.o(i.ble_advertising_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ble_advertising_on_ble_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[f1]"></a>ble_advertising_on_sys_evt</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ble_advertising.o(i.ble_advertising_on_sys_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ble_advertising_on_sys_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_evt_dispatch
</UL>

<P><STRONG><a name="[234]"></a>ble_advertising_peer_addr_reply</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ble_advertising.o(i.ble_advertising_peer_addr_reply))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
</UL>

<P><STRONG><a name="[b8]"></a>ble_advertising_start</STRONG> (Thumb, 654 bytes, Stack size 40 bytes, ble_advertising.o(i.ble_advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whitelist_has_entries
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_address_exists
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_access_in_progress
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_peer_address_clear
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_sys_evt
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>

<P><STRONG><a name="[233]"></a>ble_advertising_whitelist_reply</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_whitelist_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_advertising_whitelist_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
</UL>

<P><STRONG><a name="[eb]"></a>ble_bas_battery_level_update</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, ble_bas.o(i.ble_bas_battery_level_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_bas_battery_level_update
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_update
</UL>

<P><STRONG><a name="[e7]"></a>ble_bas_init</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ble_bas.o(i.ble_bas_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ble_bas_init &rArr; battery_level_char_add &rArr; ble_srv_report_ref_encode &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bas_init
</UL>

<P><STRONG><a name="[f5]"></a>ble_bas_on_ble_evt</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ble_bas.o(i.ble_bas_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_bas_on_ble_evt &rArr; on_write
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[f9]"></a>ble_conn_params_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ble_conn_params.o(i.ble_conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_conn_params_init &rArr; app_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
</UL>

<P><STRONG><a name="[fa]"></a>ble_conn_params_on_ble_evt</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ble_conn_params.o(i.ble_conn_params_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ble_conn_params_on_ble_evt &rArr; on_write &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[ff]"></a>ble_conn_params_stop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble_conn_params.o(i.ble_conn_params_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_conn_params_stop &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_prepare
</UL>

<P><STRONG><a name="[100]"></a>ble_dis_init</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, ble_dis.o(i.ble_dis_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ble_dis_init &rArr; char_add &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_id_encode
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnp_id_encode
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_init
</UL>

<P><STRONG><a name="[108]"></a>ble_hid_app_start</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ble_app_gzll_hid.o(i.ble_hid_app_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = ble_hid_app_start &rArr; services_init &rArr; hids_init &rArr; ble_hids_init &rArr; inp_rep_characteristics_add &rArr; rep_char_add &rArr; ble_srv_report_ref_encode &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_timers_start
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10d]"></a>ble_hid_app_stop</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ble_app_gzll_hid.o(i.ble_hid_app_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ble_hid_app_stop &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10e]"></a>ble_hids_init</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, ble_hids.o(i.ble_hids_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ble_hids_init &rArr; inp_rep_characteristics_add &rArr; rep_char_add &rArr; ble_srv_report_ref_encode &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rep_map_char_add
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_mode_char_add
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outp_rep_characteristics_add
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inp_rep_characteristics_add
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;includes_add
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_information_char_add
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_control_point_char_add
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature_rep_characteristics_add
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_kb_outp_rep_char_add
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_inp_rep_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_init
</UL>

<P><STRONG><a name="[1b7]"></a>ble_hids_inp_rep_send</STRONG> (Thumb, 116 bytes, Stack size 64 bytes, ble_hids.o(i.ble_hids_inp_rep_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_hids_inp_rep_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;home_key_release_send
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;home_key_press_send
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mouse_and_send_change
</UL>

<P><STRONG><a name="[107]"></a>ble_hids_on_ble_evt</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ble_hids.o(i.ble_hids_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_hids_on_ble_evt &rArr; on_write &rArr; on_report_value_write
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rw_authorize_request
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[236]"></a>ble_hids_outp_rep_get</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, ble_hids.o(i.ble_hids_outp_rep_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_hids_outp_rep_get
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hid_rep_char_write
</UL>

<P><STRONG><a name="[11d]"></a>ble_nus_init</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, ble_nus.o(i.ble_nus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ble_nus_init &rArr; tx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_char_add
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_init
</UL>

<P><STRONG><a name="[105]"></a>ble_nus_on_ble_evt</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ble_nus.o(i.ble_nus_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_nus_on_ble_evt &rArr; on_write
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[237]"></a>ble_nus_string_send</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, ble_nus.o(i.ble_nus_string_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_nus_string_send
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hid_rep_char_write
</UL>

<P><STRONG><a name="[123]"></a>ble_srv_ascii_to_utf8</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_srv_common.o(i.ble_srv_ascii_to_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_srv_ascii_to_utf8
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_init
</UL>

<P><STRONG><a name="[e9]"></a>ble_srv_report_ref_encode</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ble_srv_common.o(i.ble_srv_report_ref_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ble_srv_report_ref_encode &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_char_add
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rep_char_add
</UL>

<P><STRONG><a name="[12c]"></a>ble_stack_start</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_app_gzll_hid.o(i.ble_stack_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ble_stack_start &rArr; ble_stack_init &rArr; softdevice_enable &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12d]"></a>ble_stack_stop</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ble_app_gzll_hid.o(i.ble_stack_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ble_stack_stop &rArr; reset_prepare &rArr; advertising_stop &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_DisableIRQ
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_prepare
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_sd_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[131]"></a>bond_data_load</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, device_manager_peripheral.o(i.bond_data_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bond_data_load &rArr; pstorage_load &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[bb]"></a>bsp_indication_set</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bsp.o(i.bsp_indication_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[136]"></a>buttons_init_Judge</STRONG> (Thumb, 40 bytes, Stack size 88 bytes, ble_app_gzll_ui.o(i.buttons_init_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = buttons_init_Judge &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[143]"></a>com_mode_check</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ble_app_store.o(i.com_mode_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = com_mode_check &rArr; gzp_index_db_add &rArr; pstorage_flash_page_end &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_index_db_read
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_index_db_add
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14f]"></a>cpiote_interrupt_set</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ble_app_gzll_ui.o(i.cpiote_interrupt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = cpiote_interrupt_set &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_syetem_off
</UL>

<P><STRONG><a name="[1d6]"></a>nrf_gzll_disabled</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_gzp_device - judge.o(i.nrf_gzll_disabled))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notification_cb
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_disable
</UL>

<P><STRONG><a name="[1d5]"></a>nrf_gzll_host_rx_data_ready</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_gzp_device - judge.o(i.nrf_gzll_host_rx_data_ready))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notification_cb
</UL>

<P><STRONG><a name="[104]"></a>dm_ble_evt_handler</STRONG> (Thumb, 1632 bytes, Stack size 88 bytes, device_manager_peripheral.o(i.dm_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = dm_ble_evt_handler &rArr; device_instance_free &rArr; pstorage_clear &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; update_operation_execute &rArr; clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handle_initialize
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_data_load
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_instance_init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_free
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_find
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_allocate
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_context_store
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_instance_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_instance_find
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_evt_notify
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[162]"></a>dm_handle_initialize</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.dm_handle_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
</UL>

<P><STRONG><a name="[164]"></a>dm_init</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, device_manager_peripheral.o(i.dm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = dm_init &rArr; pstorage_clear &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; update_operation_execute &rArr; clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_register
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_instance_init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_instance_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_init
</UL>

<P><STRONG><a name="[16a]"></a>dm_peer_addr_get</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, device_manager_peripheral.o(i.dm_peer_addr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dm_peer_addr_get &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
</UL>

<P><STRONG><a name="[165]"></a>dm_register</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, device_manager_peripheral.o(i.dm_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dm_register &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_init
</UL>

<P><STRONG><a name="[16c]"></a>dm_service_context_set</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, device_manager_peripheral.o(i.dm_service_context_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = dm_service_context_set &rArr; pstorage_block_identifier_get
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hids_evt
</UL>

<P><STRONG><a name="[232]"></a>dm_whitelist_create</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, device_manager_peripheral.o(i.dm_whitelist_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dm_whitelist_create
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
</UL>

<P><STRONG><a name="[173]"></a>fs_queued_op_count_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fstorage.o(i.fs_queued_op_count_get))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_access_in_progress
</UL>

<P><STRONG><a name="[17b]"></a>gazell_mode_init</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, ble_app_gzll_device.o(i.gazell_mode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = gazell_mode_init &rArr; send_24_mode_communication &rArr; key_sense_turbo &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzp_disable_gzll
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_tx_power
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_timeslots_per_channel_when_device_out_of_sync
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_timeslot_period
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_sync_lifetime
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_max_tx_attempts
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_device_channel_selection_policy
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_channel_table
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_enable
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_address_req_send
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_24_mode_communication
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_sense_turbo
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_syetem_off
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzll_app_start
</UL>

<P><STRONG><a name="[188]"></a>goto_syetem_off</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ble_app_gzll_ui.o(i.goto_syetem_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = goto_syetem_off &rArr; cpiote_interrupt_set &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_disinit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpiote_interrupt_set
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_24_mode_communication
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gazell_mode_init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_manage
</UL>

<P><STRONG><a name="[190]"></a>gzll_app_start</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_app_gzll_device.o(i.gzll_app_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = gzll_app_start &rArr; gazell_mode_init &rArr; send_24_mode_communication &rArr; key_sense_turbo &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gazell_mode_init
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[191]"></a>gzll_app_stop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_app_gzll_device.o(i.gzll_app_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gzll_app_stop &rArr; nrf_gzp_disable_gzll &rArr; nrf_gzll_disable &rArr; nrf_impl_disable &rArr; sm_start &rArr; NRF_flw_prepare_call &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzp_disable_gzll
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[185]"></a>gzp_address_req_send</STRONG> (Thumb, 302 bytes, Stack size 72 bytes, nrf_gzp_device - judge.o(i.gzp_address_req_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = gzp_address_req_send &rArr; gzp_update_radio_params &rArr; nrf_gzll_enable &rArr; nrf_impl_enable &rArr; m_nrf_impl_restore_all_hw_params &rArr; nrf_lcore_init &rArr; nrf_lcore_force_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzp_disable_gzll
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_tx_power
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_max_tx_attempts
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_enable
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzp_flush_rx_fifo
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_get_tx_power
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_get_rx_fifo_packet_count
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_get_max_tx_attempts
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_flush_tx_fifo
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_flush_rx_fifo
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_fetch_packet_from_rx_fifo
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_update_radio_params
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_delay_rx_periods
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_tx_packet
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_params_store
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gazell_mode_init
</UL>

<P><STRONG><a name="[198]"></a>gzp_delay_rx_periods</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_gzp_device - judge.o(i.gzp_delay_rx_periods))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gzp_delay_rx_periods &rArr; nrf_gzll_get_timeslot_period
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_get_timeslot_period
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___24_nrf_gzp_device___Judge_c_gzp_init__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_address_req_send
</UL>

<P><STRONG><a name="[19f]"></a>gzp_generate_channels</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, nrf_gzp_judge.o(i.gzp_generate_channels))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = gzp_generate_channels &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_update_radio_params
</UL>

<P><STRONG><a name="[183]"></a>gzp_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_gzp_device - judge.o(i.gzp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gzp_init &rArr; gzp_update_radio_params &rArr; nrf_gzll_enable &rArr; nrf_impl_enable &rArr; m_nrf_impl_restore_all_hw_params &rArr; nrf_lcore_init &rArr; nrf_lcore_force_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_update_radio_params
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_params_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gazell_mode_init
</UL>

<P><STRONG><a name="[19b]"></a>gzp_update_radio_params</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, nrf_gzp_judge.o(i.gzp_update_radio_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gzp_update_radio_params &rArr; nrf_gzll_enable &rArr; nrf_impl_enable &rArr; m_nrf_impl_restore_all_hw_params &rArr; nrf_lcore_init &rArr; nrf_lcore_force_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzp_disable_gzll
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_channel_table
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_enable
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_base_address_1
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_base_address_0
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_address_prefix_byte
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_get_channel_table_size
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_generate_channels
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_address_req_send
</UL>

<P><STRONG><a name="[8a]"></a>intern_softdevice_events_execute</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, softdevice_handler.o(i.intern_softdevice_events_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = intern_softdevice_events_execute &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_IRQHandler
</UL>

<P><STRONG><a name="[186]"></a>key_sense_turbo</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, ble_app_gzll_ui.o(i.key_sense_turbo))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = key_sense_turbo &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop_all
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash_time
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pins_read
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_read_pin_state
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_24_mode_communication
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gazell_mode_init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_manage
</UL>

<P><STRONG><a name="[1c3]"></a>led_flash_time</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ble_app_gzll_ui.o(i.led_flash_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_flash_time &rArr; nrf_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_sense_turbo
</UL>

<P><STRONG><a name="[1c5]"></a>leds_init_Judge</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, ble_app_gzll_ui.o(i.leds_init_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = leds_init_Judge &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ca]"></a>log_rtt_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, nrf_log.o(i.log_rtt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = log_rtt_init &rArr; SEGGER_RTT_ConfigUpBuffer &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigUpBuffer
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigDownBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
</UL>

<P><STRONG><a name="[1cb]"></a>log_rtt_printf</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, nrf_log.o(i.log_rtt_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hid_rep_char_write
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_check_ram_start
</UL>

<P><STRONG><a name="[22]"></a>main</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = main &rArr; ble_hid_app_start &rArr; services_init &rArr; hids_init &rArr; ble_hids_init &rArr; inp_rep_characteristics_add &rArr; rep_char_add &rArr; ble_srv_report_ref_encode &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_store
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_init_Judge
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzll_app_stop
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzll_app_start
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_mode_check
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_init_Judge
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_stop
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_start
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hid_app_stop
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hid_app_start
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BETOP_switch_check
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init_and_start
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_manage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1d0]"></a>mode_store</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ble_app_store.o(i.mode_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mode_store &rArr; gzp_index_db_add &rArr; pstorage_flash_page_end &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_index_db_add
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37]"></a>notification_cb</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, nrf_gzll.o(i.notification_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = notification_cb &rArr; nrf_impl_disable &rArr; sm_start &rArr; NRF_flw_prepare_call &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_mode_changed
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_is_disabled
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_free_packet
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_disable
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_host_rx_data_ready
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_disabled
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_device_tx_success
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_device_tx_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_gzll.o(i.nrf_gzll_init)
</UL>
<P><STRONG><a name="[78]"></a>nrf_assert_internal_callback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_gzll.o(i.nrf_assert_internal_callback))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>

<P><STRONG><a name="[227]"></a>nrf_chm_execute_single_tick</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nrf_channel_manager.o(i.nrf_chm_execute_single_tick))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[1da]"></a>nrf_chm_get_current_channel</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrf_channel_manager.o(i.nrf_chm_get_current_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_chm_get_current_channel &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[15a]"></a>nrf_chm_get_current_channel_index</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_channel_manager.o(i.nrf_chm_get_current_channel_index))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_ack_received
</UL>

<P><STRONG><a name="[229]"></a>nrf_chm_get_current_timeslot</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_channel_manager.o(i.nrf_chm_get_current_timeslot))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[1db]"></a>nrf_chm_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf_channel_manager.o(i.nrf_chm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_chm_init &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
</UL>

<P><STRONG><a name="[1dc]"></a>nrf_chm_set_current_channel_index</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf_channel_manager.o(i.nrf_chm_set_current_channel_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_chm_set_current_channel_index &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_channel_table
</UL>

<P><STRONG><a name="[15b]"></a>nrf_chm_set_current_timeslot</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf_channel_manager.o(i.nrf_chm_set_current_timeslot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_chm_set_current_timeslot &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_ack_received
</UL>

<P><STRONG><a name="[1c4]"></a>nrf_delay_ms</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_delay.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_nrf_delay_c_532987f3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash_time
</UL>

<P><STRONG><a name="[9a]"></a>nrf_drv_adc_buffer_convert</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, nrf_drv_adc.o(i.nrf_drv_adc_buffer_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_adc_buffer_convert &rArr; adc_sample_process
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_int_enable
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_event_clear
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_event_check
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_config_set
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample_process
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_event_handler
</UL>

<P><STRONG><a name="[95]"></a>nrf_drv_adc_channel_enable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_drv_adc_channel_enable))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[94]"></a>nrf_drv_adc_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nrf_drv_adc.o(i.nrf_drv_adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_adc_init &rArr; nrf_drv_common_irq_enable &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[98]"></a>nrf_drv_adc_uninit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nrf_drv_adc.o(i.nrf_drv_adc_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_adc_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_disinit
</UL>

<P><STRONG><a name="[1df]"></a>nrf_drv_common_irq_enable</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrf_drv_common.o(i.nrf_drv_common_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_common_irq_enable &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_init
</UL>

<P><STRONG><a name="[a4]"></a>nrf_drv_ppi_channel_alloc</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channel_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_ppi_channel_alloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_to_mask
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sampling_event_init
</UL>

<P><STRONG><a name="[a5]"></a>nrf_drv_ppi_channel_assign</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channel_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_ppi_channel_assign &rArr; is_programmable_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_programmable_app_channel
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sampling_event_init
</UL>

<P><STRONG><a name="[99]"></a>nrf_drv_ppi_channel_disable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channel_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_ppi_channel_disable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ppi_channel_disable
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_programmable_app_channel
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_app_channel
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_disinit
</UL>

<P><STRONG><a name="[9f]"></a>nrf_drv_ppi_channel_enable</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channel_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_ppi_channel_enable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_programmable_app_channel
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_app_channel
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sampling_event_enable
</UL>

<P><STRONG><a name="[a0]"></a>nrf_drv_ppi_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_init))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sampling_event_init
</UL>

<P><STRONG><a name="[1e2]"></a>nrf_drv_timer_compare</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, nrf_drv_timer.o(i.nrf_drv_timer_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_timer_compare
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_int_enable
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_int_disable
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_int_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_extended_compare
</UL>

<P><STRONG><a name="[1e5]"></a>nrf_drv_timer_disable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_drv_timer.o(i.nrf_drv_timer_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_timer_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_uninit
</UL>

<P><STRONG><a name="[a3]"></a>nrf_drv_timer_enable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_drv_timer.o(i.nrf_drv_timer_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_timer_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sampling_event_init
</UL>

<P><STRONG><a name="[a2]"></a>nrf_drv_timer_extended_compare</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, nrf_drv_timer.o(i.nrf_drv_timer_extended_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_drv_timer_extended_compare &rArr; nrf_drv_timer_compare
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_shorts_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sampling_event_init
</UL>

<P><STRONG><a name="[a1]"></a>nrf_drv_timer_init</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, nrf_drv_timer.o(i.nrf_drv_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_drv_timer_init &rArr; nrf_drv_common_irq_enable &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_event_get
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_get_IRQn
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sampling_event_init
</UL>

<P><STRONG><a name="[97]"></a>nrf_drv_timer_uninit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, nrf_drv_timer.o(i.nrf_drv_timer_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_timer_uninit &rArr; nrf_drv_timer_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_disable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_shorts_disable
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_int_disable
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_get_IRQn
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_disinit
</UL>

<P><STRONG><a name="[d5]"></a>nrf_drv_uart_tx</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_drv_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_uart_tx &rArr; nrf_drv_uart_tx_for_uart &rArr; tx_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uart
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_in_progress
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>

<P><STRONG><a name="[d4]"></a>nrf_drv_uart_tx_in_progress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_drv_uart_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[1ee]"></a>nrf_fifo_flush</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, nrf_fifo.o(i.nrf_fifo_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_fifo_flush &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_flush_tx_fifo
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_flush_rx_fifo
</UL>

<P><STRONG><a name="[1ef]"></a>nrf_fifo_free_packet</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, nrf_fifo.o(i.nrf_fifo_free_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_fifo_free_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_free_packet
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_prx
</UL>

<P><STRONG><a name="[22f]"></a>nrf_fifo_get_available_packet_count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_fifo.o(i.nrf_fifo_get_available_packet_count))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_put_tx_fifo
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_available_fifo_packets
</UL>

<P><STRONG><a name="[1f0]"></a>nrf_fifo_get_packet_count</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_fifo.o(i.nrf_fifo_get_packet_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_start_ptx
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_tx_fifo_status
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_rx_fifo_status
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_prx
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_search_for_ptx_pipe_to_service
</UL>

<P><STRONG><a name="[230]"></a>nrf_fifo_init</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, nrf_fifo.o(i.nrf_fifo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_fifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_init
</UL>

<P><STRONG><a name="[1f1]"></a>nrf_fifo_pop_packet</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nrf_fifo.o(i.nrf_fifo_pop_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_fifo_pop_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_pop_rx_fifo
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_ptx
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_prx
</UL>

<P><STRONG><a name="[1f2]"></a>nrf_fifo_put_packet</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, nrf_fifo.o(i.nrf_fifo_put_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_fifo_put_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_put_tx_fifo
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_ptx
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_prx
</UL>

<P><STRONG><a name="[1f3]"></a>nrf_fifo_read_packet</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nrf_fifo.o(i.nrf_fifo_read_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_fifo_read_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_start_ptx
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_read_rx_fifo
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_prx
</UL>

<P><STRONG><a name="[1f4]"></a>nrf_fifo_reserve_packet</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, nrf_fifo.o(i.nrf_fifo_reserve_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_fifo_reserve_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_start_ptx
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_start_prx
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_reserve_packet
</UL>

<P><STRONG><a name="[1cd]"></a>nrf_flw_get_ext_capture_task</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_flywheel.o(i.nrf_flw_get_ext_capture_task))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nrf_impl_restore_all_hw_params
</UL>

<P><STRONG><a name="[22c]"></a>nrf_flw_get_flw_call_event</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_flywheel.o(i.nrf_flw_get_flw_call_event))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[18d]"></a>nrf_flw_get_runstate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_flywheel.o(i.nrf_flw_get_runstate))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_disable
</UL>

<P><STRONG><a name="[1f5]"></a>nrf_flw_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nrf_flywheel.o(i.nrf_flw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_flw_init &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
</UL>

<P><STRONG><a name="[24a]"></a>nrf_flw_start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_flywheel.o(i.nrf_flw_start))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start
</UL>

<P><STRONG><a name="[18e]"></a>nrf_flw_stop</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, nrf_flywheel.o(i.nrf_flw_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nrf_flw_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_disable
</UL>

<P><STRONG><a name="[156]"></a>nrf_flw_task_is_delayed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_flywheel.o(i.nrf_flw_task_is_delayed))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_ack_received
</UL>

<P><STRONG><a name="[1ae]"></a>nrf_gzll_add_packet_to_tx_fifo</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, nrf_gzll.o(i.nrf_gzll_add_packet_to_tx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nrf_gzll_add_packet_to_tx_fifo &rArr; nrf_impl_put_tx_fifo &rArr; nrf_pm_put_tx_fifo &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_reserve_packet
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_put_tx_fifo
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_tx_fifo_status
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_rx_fifo_status
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_available_fifo_packets
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_24_mode_communication
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_tx_packet
</UL>

<P><STRONG><a name="[1d4]"></a>nrf_gzll_device_tx_failed</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, nrf_gzp_device - judge.o(i.nrf_gzll_device_tx_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gzll_device_tx_failed &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notification_cb
</UL>

<P><STRONG><a name="[1d3]"></a>nrf_gzll_device_tx_success</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, nrf_gzp_device - judge.o(i.nrf_gzll_device_tx_success))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gzll_device_tx_success &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notification_cb
</UL>

<P><STRONG><a name="[1fc]"></a>nrf_gzll_disable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_gzll.o(i.nrf_gzll_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_gzll_disable &rArr; nrf_impl_disable &rArr; sm_start &rArr; NRF_flw_prepare_call &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_is_disabled
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_disable
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_disabled
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzp_disable_gzll
</UL>

<P><STRONG><a name="[184]"></a>nrf_gzll_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf_gzll.o(i.nrf_gzll_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrf_gzll_enable &rArr; nrf_impl_enable &rArr; m_nrf_impl_restore_all_hw_params &rArr; nrf_lcore_init &rArr; nrf_lcore_force_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_address_req_send
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gazell_mode_init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_update_radio_params
</UL>

<P><STRONG><a name="[19a]"></a>nrf_gzll_fetch_packet_from_rx_fifo</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, nrf_gzll.o(i.nrf_gzll_fetch_packet_from_rx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_gzll_fetch_packet_from_rx_fifo &rArr; nrf_impl_pop_rx_fifo &rArr; nrf_pm_pop_rx_fifo &rArr; nrf_fifo_pop_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_read_rx_fifo
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_pop_rx_fifo
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_rx_fifo_status
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_free_packet
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_address_req_send
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzp_flush_rx_fifo
</UL>

<P><STRONG><a name="[195]"></a>nrf_gzll_flush_rx_fifo</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf_gzll.o(i.nrf_gzll_flush_rx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_gzll_flush_rx_fifo &rArr; nrf_impl_flush_rx_fifo &rArr; nrf_pm_flush_rx_fifo &rArr; nrf_fifo_flush &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_flush_rx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_address_req_send
</UL>

<P><STRONG><a name="[19d]"></a>nrf_gzll_flush_tx_fifo</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrf_gzll.o(i.nrf_gzll_flush_tx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_gzll_flush_tx_fifo &rArr; nrf_impl_flush_tx_fifo &rArr; nrf_pm_flush_tx_fifo &rArr; nrf_fifo_flush &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_flush_tx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_address_req_send
</UL>

<P><STRONG><a name="[1b3]"></a>nrf_gzll_get_channel_table_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_gzll.o(i.nrf_gzll_get_channel_table_size))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_update_radio_params
</UL>

<P><STRONG><a name="[193]"></a>nrf_gzll_get_max_tx_attempts</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_gzll.o(i.nrf_gzll_get_max_tx_attempts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gzll_get_max_tx_attempts
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_max_allowed_tx_attempts
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_address_req_send
</UL>

<P><STRONG><a name="[199]"></a>nrf_gzll_get_rx_fifo_packet_count</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_gzll.o(i.nrf_gzll_get_rx_fifo_packet_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_gzll_get_rx_fifo_packet_count &rArr; nrf_impl_get_rx_fifo_status &rArr; nrf_pm_get_rx_fifo_status &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_rx_fifo_status
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_address_req_send
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzp_flush_rx_fifo
</UL>

<P><STRONG><a name="[19e]"></a>nrf_gzll_get_timeslot_period</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_gzll.o(i.nrf_gzll_get_timeslot_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gzll_get_timeslot_period
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_timeslot_period
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_delay_rx_periods
</UL>

<P><STRONG><a name="[194]"></a>nrf_gzll_get_tx_power</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, nrf_gzll.o(i.nrf_gzll_get_tx_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gzll_get_tx_power
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_tx_power
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_address_req_send
</UL>

<P><STRONG><a name="[17c]"></a>nrf_gzll_init</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, nrf_gzll.o(i.nrf_gzll_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = nrf_gzll_init &rArr; nrf_impl_init &rArr; update_mode &rArr; nrf_pm_end_prx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_xosc_ctl
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_tx_power
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_mode
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_datarate
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_channel_table
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_channel_selection_policy
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_base_address_length
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_enable_rssi
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gazell_mode_init
</UL>

<P><STRONG><a name="[1af]"></a>nrf_gzll_is_enabled</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_gzll.o(i.nrf_gzll_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzp_disable_gzll
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_update_radio_params
</UL>

<P><STRONG><a name="[1d7]"></a>nrf_gzll_mode_changed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_gzll.o(i.nrf_gzll_mode_changed))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notification_cb
</UL>

<P><STRONG><a name="[20e]"></a>nrf_gzll_ok_to_add_packet_to_tx_fifo</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, nrf_gzll.o(i.nrf_gzll_ok_to_add_packet_to_tx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_gzll_ok_to_add_packet_to_tx_fifo &rArr; nrf_impl_get_tx_fifo_status &rArr; nrf_pm_get_tx_fifo_status &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_tx_fifo_status
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_rx_fifo_status
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_available_fifo_packets
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_24_mode_communication
</UL>

<P><STRONG><a name="[1b1]"></a>nrf_gzll_set_address_prefix_byte</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nrf_gzll.o(i.nrf_gzll_set_address_prefix_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_gzll_set_address_prefix_byte &rArr; nrf_impl_set_prefix_byte &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_prefix_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_update_radio_params
</UL>

<P><STRONG><a name="[1b0]"></a>nrf_gzll_set_base_address_0</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_gzll.o(i.nrf_gzll_set_base_address_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_gzll_set_base_address_0 &rArr; nrf_impl_set_pipe_0_base_address
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_pipe_0_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_update_radio_params
</UL>

<P><STRONG><a name="[1b2]"></a>nrf_gzll_set_base_address_1</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_gzll.o(i.nrf_gzll_set_base_address_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_gzll_set_base_address_1 &rArr; nrf_impl_set_pipes_1_to_7_base_address
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_pipes_1_to_7_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_update_radio_params
</UL>

<P><STRONG><a name="[182]"></a>nrf_gzll_set_channel_table</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, nrf_gzll.o(i.nrf_gzll_set_channel_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_gzll_set_channel_table &rArr; nrf_impl_set_channel_table &rArr; nrf_chm_set_current_channel_index &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_channel_table
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gazell_mode_init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_update_radio_params
</UL>

<P><STRONG><a name="[17e]"></a>nrf_gzll_set_device_channel_selection_policy</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nrf_gzll.o(i.nrf_gzll_set_device_channel_selection_policy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gzll_set_device_channel_selection_policy
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_channel_selection_policy
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gazell_mode_init
</UL>

<P><STRONG><a name="[17d]"></a>nrf_gzll_set_max_tx_attempts</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_gzll.o(i.nrf_gzll_set_max_tx_attempts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gzll_set_max_tx_attempts
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_max_allowed_tx_attempts
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_address_req_send
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gazell_mode_init
</UL>

<P><STRONG><a name="[180]"></a>nrf_gzll_set_sync_lifetime</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_gzll.o(i.nrf_gzll_set_sync_lifetime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gzll_set_sync_lifetime
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_sync_lifetime
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gazell_mode_init
</UL>

<P><STRONG><a name="[17f]"></a>nrf_gzll_set_timeslot_period</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_gzll.o(i.nrf_gzll_set_timeslot_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gzll_set_timeslot_period
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_timeslot_period
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gazell_mode_init
</UL>

<P><STRONG><a name="[18a]"></a>nrf_gzll_set_timeslots_per_channel_when_device_out_of_sync</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_gzll.o(i.nrf_gzll_set_timeslots_per_channel_when_device_out_of_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_gzll_set_timeslots_per_channel_when_device_out_of_sync &rArr; nrf_impl_set_timeslots_per_channel_when_out_of_sync
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_timeslots_per_channel_when_out_of_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gazell_mode_init
</UL>

<P><STRONG><a name="[181]"></a>nrf_gzll_set_tx_power</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, nrf_gzll.o(i.nrf_gzll_set_tx_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gzll_set_tx_power
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_tx_power
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_address_req_send
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gazell_mode_init
</UL>

<P><STRONG><a name="[189]"></a>nrf_gzp_disable_gzll</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_gzp_judge.o(i.nrf_gzp_disable_gzll))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_gzp_disable_gzll &rArr; nrf_gzll_disable &rArr; nrf_impl_disable &rArr; sm_start &rArr; NRF_flw_prepare_call &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_is_enabled
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_address_req_send
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gazell_mode_init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzll_app_stop
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_update_radio_params
</UL>

<P><STRONG><a name="[197]"></a>nrf_gzp_flush_rx_fifo</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nrf_gzp_judge.o(i.nrf_gzp_flush_rx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrf_gzp_flush_rx_fifo &rArr; nrf_gzll_fetch_packet_from_rx_fifo &rArr; nrf_impl_pop_rx_fifo &rArr; nrf_pm_pop_rx_fifo &rArr; nrf_fifo_pop_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzp_set_primask
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_get_rx_fifo_packet_count
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_fetch_packet_from_rx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_address_req_send
</UL>

<P><STRONG><a name="[1d9]"></a>nrf_impl_disable</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrf_impala.o(i.nrf_impl_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_impl_disable &rArr; sm_start &rArr; NRF_flw_prepare_call &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notification_cb
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_disable
</UL>

<P><STRONG><a name="[1fd]"></a>nrf_impl_enable</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, nrf_impala.o(i.nrf_impl_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_impl_enable &rArr; m_nrf_impl_restore_all_hw_params &rArr; nrf_lcore_init &rArr; nrf_lcore_force_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sm_set_next_state
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sm_get_current_state
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nrf_impl_restore_all_hw_params
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_enable
</UL>

<P><STRONG><a name="[20d]"></a>nrf_impl_enable_rssi</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_impala.o(i.nrf_impl_enable_rssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_impl_enable_rssi &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_init
</UL>

<P><STRONG><a name="[200]"></a>nrf_impl_flush_rx_fifo</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_impala.o(i.nrf_impl_flush_rx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_impl_flush_rx_fifo &rArr; nrf_pm_flush_rx_fifo &rArr; nrf_fifo_flush &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_flush_rx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_flush_rx_fifo
</UL>

<P><STRONG><a name="[201]"></a>nrf_impl_flush_tx_fifo</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, nrf_impala.o(i.nrf_impl_flush_tx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_impl_flush_tx_fifo &rArr; nrf_pm_flush_tx_fifo &rArr; nrf_fifo_flush &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_flush_tx_fifo
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_flush_tx_fifo
</UL>

<P><STRONG><a name="[1d2]"></a>nrf_impl_free_packet</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_impala.o(i.nrf_impl_free_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_impl_free_packet &rArr; nrf_pm_free_packet &rArr; nrf_fifo_free_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_free_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notification_cb
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_fetch_packet_from_rx_fifo
</UL>

<P><STRONG><a name="[1f9]"></a>nrf_impl_get_available_fifo_packets</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_impala.o(i.nrf_impl_get_available_fifo_packets))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_impl_get_available_fifo_packets &rArr; nrf_pm_get_available_fifo_packets
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_available_fifo_packets
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_ok_to_add_packet_to_tx_fifo
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_add_packet_to_tx_fifo
</UL>

<P><STRONG><a name="[202]"></a>nrf_impl_get_max_allowed_tx_attempts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_impala.o(i.nrf_impl_get_max_allowed_tx_attempts))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_get_max_tx_attempts
</UL>

<P><STRONG><a name="[1f8]"></a>nrf_impl_get_rx_fifo_status</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_impala.o(i.nrf_impl_get_rx_fifo_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_impl_get_rx_fifo_status &rArr; nrf_pm_get_rx_fifo_status &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_rx_fifo_status
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_ok_to_add_packet_to_tx_fifo
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_add_packet_to_tx_fifo
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_get_rx_fifo_packet_count
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_fetch_packet_from_rx_fifo
</UL>

<P><STRONG><a name="[203]"></a>nrf_impl_get_timeslot_period</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_impala.o(i.nrf_impl_get_timeslot_period))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_get_timeslot_period
</UL>

<P><STRONG><a name="[1f7]"></a>nrf_impl_get_tx_fifo_status</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_impala.o(i.nrf_impl_get_tx_fifo_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_impl_get_tx_fifo_status &rArr; nrf_pm_get_tx_fifo_status &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_tx_fifo_status
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_ok_to_add_packet_to_tx_fifo
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_add_packet_to_tx_fifo
</UL>

<P><STRONG><a name="[204]"></a>nrf_impl_get_tx_power</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_impala.o(i.nrf_impl_get_tx_power))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_get_tx_power
</UL>

<P><STRONG><a name="[205]"></a>nrf_impl_init</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, nrf_impala.o(i.nrf_impl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = nrf_impl_init &rArr; update_mode &rArr; nrf_pm_end_prx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sm_init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_set_dyn_ack_status
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nm_init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mode
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nrf_impl_restore_all_hw_params
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_init
</UL>

<P><STRONG><a name="[1d8]"></a>nrf_impl_is_disabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_impala.o(i.nrf_impl_is_disabled))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notification_cb
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_disable
</UL>

<P><STRONG><a name="[1ff]"></a>nrf_impl_pop_rx_fifo</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_impala.o(i.nrf_impl_pop_rx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_impl_pop_rx_fifo &rArr; nrf_pm_pop_rx_fifo &rArr; nrf_fifo_pop_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_pop_rx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_fetch_packet_from_rx_fifo
</UL>

<P><STRONG><a name="[1fb]"></a>nrf_impl_put_tx_fifo</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nrf_impala.o(i.nrf_impl_put_tx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_impl_put_tx_fifo &rArr; nrf_pm_put_tx_fifo &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_put_tx_fifo
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_add_packet_to_tx_fifo
</UL>

<P><STRONG><a name="[1fe]"></a>nrf_impl_read_rx_fifo</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_impala.o(i.nrf_impl_read_rx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_impl_read_rx_fifo &rArr; nrf_pm_read_rx_fifo &rArr; nrf_fifo_read_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_read_rx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_fetch_packet_from_rx_fifo
</UL>

<P><STRONG><a name="[1fa]"></a>nrf_impl_reserve_packet</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_impala.o(i.nrf_impl_reserve_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_impl_reserve_packet &rArr; nrf_pm_reserve_packet &rArr; nrf_fifo_reserve_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_reserve_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_add_packet_to_tx_fifo
</UL>

<P><STRONG><a name="[208]"></a>nrf_impl_set_base_address_length</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_impala.o(i.nrf_impl_set_base_address_length))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_init
</UL>

<P><STRONG><a name="[209]"></a>nrf_impl_set_channel_selection_policy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_impala.o(i.nrf_impl_set_channel_selection_policy))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_device_channel_selection_policy
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_init
</UL>

<P><STRONG><a name="[206]"></a>nrf_impl_set_channel_table</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nrf_impala.o(i.nrf_impl_set_channel_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_impl_set_channel_table &rArr; nrf_chm_set_current_channel_index &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_set_current_channel_index
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_channel_table
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_init
</UL>

<P><STRONG><a name="[20b]"></a>nrf_impl_set_datarate</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, nrf_impala.o(i.nrf_impl_set_datarate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_impl_set_datarate
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_init
</UL>

<P><STRONG><a name="[212]"></a>nrf_impl_set_max_allowed_tx_attempts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_impala.o(i.nrf_impl_set_max_allowed_tx_attempts))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_max_tx_attempts
</UL>

<P><STRONG><a name="[207]"></a>nrf_impl_set_mode</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrf_impala.o(i.nrf_impl_set_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = nrf_impl_set_mode &rArr; update_mode &rArr; nrf_pm_end_prx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mode
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_init
</UL>

<P><STRONG><a name="[210]"></a>nrf_impl_set_pipe_0_base_address</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, nrf_impala.o(i.nrf_impl_set_pipe_0_base_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_impl_set_pipe_0_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_base_address_0
</UL>

<P><STRONG><a name="[211]"></a>nrf_impl_set_pipes_1_to_7_base_address</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, nrf_impala.o(i.nrf_impl_set_pipes_1_to_7_base_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_impl_set_pipes_1_to_7_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_base_address_1
</UL>

<P><STRONG><a name="[20f]"></a>nrf_impl_set_prefix_byte</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, nrf_impala.o(i.nrf_impl_set_prefix_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_impl_set_prefix_byte &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_address_prefix_byte
</UL>

<P><STRONG><a name="[213]"></a>nrf_impl_set_sync_lifetime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_impala.o(i.nrf_impl_set_sync_lifetime))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_sync_lifetime
</UL>

<P><STRONG><a name="[214]"></a>nrf_impl_set_timeslot_period</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_impala.o(i.nrf_impl_set_timeslot_period))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_timeslot_period
</UL>

<P><STRONG><a name="[215]"></a>nrf_impl_set_timeslots_per_channel_when_out_of_sync</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, nrf_impala.o(i.nrf_impl_set_timeslots_per_channel_when_out_of_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nrf_impl_set_timeslots_per_channel_when_out_of_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_timeslots_per_channel_when_device_out_of_sync
</UL>

<P><STRONG><a name="[20a]"></a>nrf_impl_set_tx_power</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_impala.o(i.nrf_impl_set_tx_power))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_tx_power
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_init
</UL>

<P><STRONG><a name="[20c]"></a>nrf_impl_set_xosc_ctl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_impala.o(i.nrf_impl_set_xosc_ctl))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_init
</UL>

<P><STRONG><a name="[2]"></a>nrf_impl_state_fun_device_send_packet</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, nrf_impala.o(i.nrf_impl_state_fun_device_send_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_impl_state_fun_device_send_packet &rArr; NRF_flw_prepare_call &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sm_set_next_state
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_start_operation
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_flw_prepare_call
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_state_machine.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>nrf_impl_state_fun_timeslot_start</STRONG> (Thumb, 1200 bytes, Stack size 48 bytes, nrf_impala.o(i.nrf_impl_state_fun_timeslot_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = nrf_impl_state_fun_timeslot_start &rArr; update_mode &rArr; nrf_pm_end_prx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sm_set_next_state
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_there_is_ptx_packet_to_be_serviced
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_start_ptx
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_state
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_current_ptx_pipe
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_current_ptx_packet
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_current_ptx_ack_ptr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_ptx
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nm_get_remaining_space_in_notification_queue
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nm_add
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_rx_address_match
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_prepare_operation
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_force_disable
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_task_is_delayed
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_stop
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_get_runstate
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_get_flw_call_event
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_set_current_timeslot
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_set_current_channel_index
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_get_current_timeslot
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_get_current_channel_index
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_get_current_channel
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_execute_single_tick
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_flw_prepare_call
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_rx_enabling
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mode
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_disable
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_state_machine.o(.data)
</UL>
<P><STRONG><a name="[df]"></a>nrf_lcore_force_disable</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, nrf_link_core.o(i.nrf_lcore_force_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_lcore_force_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_nrf_link_core_c_b93f5dba__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_init
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_rx_enabling
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_packet_received
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mode
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_disable
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_ack_received
</UL>

<P><STRONG><a name="[1ce]"></a>nrf_lcore_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, nrf_link_core.o(i.nrf_lcore_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_lcore_init &rArr; nrf_lcore_force_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_force_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nrf_impl_restore_all_hw_params
</UL>

<P><STRONG><a name="[e2]"></a>nrf_lcore_prepare_operation</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, nrf_link_core.o(i.nrf_lcore_prepare_operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_lcore_prepare_operation &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_rx_enabling
</UL>

<P><STRONG><a name="[228]"></a>nrf_lcore_rx_address_match</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_link_core.o(i.nrf_lcore_rx_address_match))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[e3]"></a>nrf_lcore_start_operation</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nrf_link_core.o(i.nrf_lcore_start_operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_lcore_start_operation &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_device_send_packet
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_rx_enabling
</UL>

<P><STRONG><a name="[de]"></a>nrf_nm_add</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, nrf_notification_manager.o(i.nrf_nm_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_nm_add &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_packet_received
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mode
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_disable
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_ack_received
</UL>

<P><STRONG><a name="[e4]"></a>nrf_nm_get_remaining_space_in_notification_queue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_notification_manager.o(i.nrf_nm_get_remaining_space_in_notification_queue))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_rx_enabling
</UL>

<P><STRONG><a name="[21e]"></a>nrf_nm_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrf_notification_manager.o(i.nrf_nm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_nm_init &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
</UL>

<P><STRONG><a name="[1a2]"></a>nrf_nvmc_page_erase</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nrf_nvmc.o(i.nrf_nvmc_page_erase))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_index_db_add
</UL>

<P><STRONG><a name="[1a3]"></a>nrf_nvmc_write_byte</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, nrf_nvmc.o(i.nrf_nvmc_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_nvmc_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_index_db_add
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nvmc_write_bytes
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_index_db_add
</UL>

<P><STRONG><a name="[1a7]"></a>nrf_nvmc_write_bytes</STRONG> (Thumb, 28 bytes, Stack size 20 bytes, nrf_nvmc.o(i.nrf_nvmc_write_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_nvmc_write_bytes &rArr; nrf_nvmc_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nvmc_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_params_db_add
</UL>

<P><STRONG><a name="[dc]"></a>nrf_pm_end_prx</STRONG> (Thumb, 364 bytes, Stack size 56 bytes, nrf_packet_manager.o(i.nrf_pm_end_prx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nrf_pm_end_prx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_read_packet
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_put_packet
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_pop_packet
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_get_packet_count
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_free_packet
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_search_for_ptx_pipe_to_service
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_packet_received
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mode
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_disable
</UL>

<P><STRONG><a name="[157]"></a>nrf_pm_end_ptx</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, nrf_packet_manager.o(i.nrf_pm_end_ptx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_pm_end_ptx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_put_packet
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_pop_packet
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_search_for_ptx_pipe_to_service
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mode
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_disable
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_ack_received
</UL>

<P><STRONG><a name="[219]"></a>nrf_pm_flush_rx_fifo</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_packet_manager.o(i.nrf_pm_flush_rx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_pm_flush_rx_fifo &rArr; nrf_fifo_flush &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_flush_rx_fifo
</UL>

<P><STRONG><a name="[21a]"></a>nrf_pm_flush_tx_fifo</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nrf_packet_manager.o(i.nrf_pm_flush_tx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_pm_flush_tx_fifo &rArr; nrf_fifo_flush &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_flush
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_search_for_ptx_pipe_to_service
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_flush_tx_fifo
</UL>

<P><STRONG><a name="[21b]"></a>nrf_pm_free_packet</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_packet_manager.o(i.nrf_pm_free_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_pm_free_packet &rArr; nrf_fifo_free_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_free_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_free_packet
</UL>

<P><STRONG><a name="[21c]"></a>nrf_pm_get_available_fifo_packets</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_packet_manager.o(i.nrf_pm_get_available_fifo_packets))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_pm_get_available_fifo_packets
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_get_available_packet_count
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_available_fifo_packets
</UL>

<P><STRONG><a name="[22b]"></a>nrf_pm_get_current_ptx_ack_ptr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_packet_manager.o(i.nrf_pm_get_current_ptx_ack_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[158]"></a>nrf_pm_get_current_ptx_packet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_packet_manager.o(i.nrf_pm_get_current_ptx_packet))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_ack_received
</UL>

<P><STRONG><a name="[159]"></a>nrf_pm_get_current_ptx_pipe</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_packet_manager.o(i.nrf_pm_get_current_ptx_pipe))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_ack_received
</UL>

<P><STRONG><a name="[dd]"></a>nrf_pm_get_rx_fifo_status</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_packet_manager.o(i.nrf_pm_get_rx_fifo_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_pm_get_rx_fifo_status &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_get_packet_count
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_packet_received
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_rx_fifo_status
</UL>

<P><STRONG><a name="[e1]"></a>nrf_pm_get_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_packet_manager.o(i.nrf_pm_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_rx_enabling
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mode
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_disable
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_ack_received
</UL>

<P><STRONG><a name="[21d]"></a>nrf_pm_get_tx_fifo_status</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_packet_manager.o(i.nrf_pm_get_tx_fifo_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_pm_get_tx_fifo_status &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_get_packet_count
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_tx_fifo_status
</UL>

<P><STRONG><a name="[21f]"></a>nrf_pm_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, nrf_packet_manager.o(i.nrf_pm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_pm_init &rArr; nrf_fifo_init
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
</UL>

<P><STRONG><a name="[223]"></a>nrf_pm_pop_rx_fifo</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_packet_manager.o(i.nrf_pm_pop_rx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_pm_pop_rx_fifo &rArr; nrf_fifo_pop_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_pop_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_pop_rx_fifo
</UL>

<P><STRONG><a name="[224]"></a>nrf_pm_put_tx_fifo</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nrf_packet_manager.o(i.nrf_pm_put_tx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_pm_put_tx_fifo &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_put_packet
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_get_available_packet_count
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_search_for_ptx_pipe_to_service
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_put_tx_fifo
</UL>

<P><STRONG><a name="[225]"></a>nrf_pm_read_rx_fifo</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_packet_manager.o(i.nrf_pm_read_rx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_pm_read_rx_fifo &rArr; nrf_fifo_read_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_read_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_read_rx_fifo
</UL>

<P><STRONG><a name="[226]"></a>nrf_pm_reserve_packet</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_packet_manager.o(i.nrf_pm_reserve_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_pm_reserve_packet &rArr; nrf_fifo_reserve_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_reserve_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_reserve_packet
</UL>

<P><STRONG><a name="[22e]"></a>nrf_pm_search_for_ptx_pipe_to_service</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, nrf_packet_manager.o(i.nrf_pm_search_for_ptx_pipe_to_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_get_packet_count
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_put_tx_fifo
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_flush_tx_fifo
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_ptx
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_prx
</UL>

<P><STRONG><a name="[221]"></a>nrf_pm_set_dyn_ack_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_packet_manager.o(i.nrf_pm_set_dyn_ack_status))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
</UL>

<P><STRONG><a name="[e5]"></a>nrf_pm_start_prx</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nrf_packet_manager.o(i.nrf_pm_start_prx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_pm_start_prx &rArr; nrf_fifo_reserve_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_reserve_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_rx_enabling
</UL>

<P><STRONG><a name="[22a]"></a>nrf_pm_start_ptx</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, nrf_packet_manager.o(i.nrf_pm_start_ptx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_pm_start_ptx &rArr; nrf_fifo_reserve_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_reserve_packet
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_read_packet
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_get_packet_count
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[22d]"></a>nrf_pm_there_is_ptx_packet_to_be_serviced</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_packet_manager.o(i.nrf_pm_there_is_ptx_packet_to_be_serviced))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[38]"></a>nrf_sm_execute</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_state_machine.o(i.nrf_sm_execute))
<BR>[Address Reference Count : 3]<UL><LI> nrf_impala.o(i.nrf_impl_state_fun_device_send_packet)
<LI> nrf_impala.o(i.nrf_impl_state_fun_timeslot_start)
<LI> nrf_impala.o(i.sm_start)
</UL>
<P><STRONG><a name="[218]"></a>nrf_sm_get_current_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_state_machine.o(i.nrf_sm_get_current_state))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_enable
</UL>

<P><STRONG><a name="[249]"></a>nrf_sm_get_next_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_state_machine.o(i.nrf_sm_get_next_state))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start
</UL>

<P><STRONG><a name="[220]"></a>nrf_sm_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_state_machine.o(i.nrf_sm_init))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
</UL>

<P><STRONG><a name="[18f]"></a>nrf_sm_set_next_state</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_state_machine.o(i.nrf_sm_set_next_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_sm_set_next_state &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_device_send_packet
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_disable
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_enable
</UL>

<P><STRONG><a name="[172]"></a>pstorage_access_status_get</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, pstorage.o(i.pstorage_access_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_access_in_progress
</UL>

<P><STRONG><a name="[132]"></a>pstorage_block_identifier_get</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, pstorage.o(i.pstorage_block_identifier_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pstorage_block_identifier_get
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_service_context_set
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_data_load
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_free
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_context_store
</UL>

<P><STRONG><a name="[160]"></a>pstorage_clear</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, pstorage.o(i.pstorage_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pstorage_clear &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; update_operation_execute &rArr; clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_free
</UL>

<P><STRONG><a name="[163]"></a>pstorage_init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, pstorage.o(i.pstorage_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pstorage_init &rArr; pstorage_flash_page_end &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_init
</UL>

<P><STRONG><a name="[133]"></a>pstorage_load</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, pstorage.o(i.pstorage_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pstorage_load &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_data_load
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_load
</UL>

<P><STRONG><a name="[169]"></a>pstorage_register</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, pstorage.o(i.pstorage_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = pstorage_register &rArr; pstorage_flash_page_end &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
</UL>

<P><STRONG><a name="[31]"></a>pstorage_store</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, pstorage.o(i.pstorage_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = pstorage_store &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; update_operation_execute &rArr; clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
</UL>
<BR>[Address Reference Count : 2]<UL><LI> device_manager_peripheral.o(i.device_context_store)
<LI> device_manager_peripheral.o(i.gatts_context_store)
</UL>
<P><STRONG><a name="[242]"></a>pstorage_sys_event_handler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, pstorage.o(i.pstorage_sys_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pstorage_sys_event_handler &rArr; flash_operation_success_run &rArr; erase_sub_state_sm_run &rArr; clear_post_processing_run &rArr; store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_failure_run
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_evt_dispatch
</UL>

<P><STRONG><a name="[30]"></a>pstorage_update</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, pstorage.o(i.pstorage_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = pstorage_update &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; update_operation_execute &rArr; clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
</UL>
<BR>[Address Reference Count : 2]<UL><LI> device_manager_peripheral.o(i.device_context_store)
<LI> device_manager_peripheral.o(i.gatts_context_store)
</UL>
<P><STRONG><a name="[243]"></a>read_mouse_and_send2</STRONG> (Thumb, 622 bytes, Stack size 8 bytes, ble_app_gzll_device.o(i.read_mouse_and_send2))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = read_mouse_and_send2 &rArr; adc_change_data_calculate &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_read_pin_state
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_change_data_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_24_mode_communication
</UL>

<P><STRONG><a name="[23f]"></a>read_mouse_and_send_change</STRONG> (Thumb, 508 bytes, Stack size 16 bytes, ble_app_gzll_hid.o(i.read_mouse_and_send_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = read_mouse_and_send_change &rArr; home_key_release_send &rArr; ble_hids_inp_rep_send
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;home_key_release_send
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;home_key_press_send
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_read_pin_state
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_inp_rep_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_manage
</UL>

<P><STRONG><a name="[128]"></a>sd_check_ram_start</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, softdevice_handler.o(i.sd_check_ram_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = sd_check_ram_start &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_end_address_get
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[18b]"></a>send_24_mode_communication</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, ble_app_gzll_device.o(i.send_24_mode_communication))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = send_24_mode_communication &rArr; key_sense_turbo &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_ok_to_add_packet_to_tx_fifo
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_add_packet_to_tx_fifo
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mouse_and_send2
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_read_pin_state
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_sense_turbo
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_syetem_off
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gazell_mode_init
</UL>

<P><STRONG><a name="[12a]"></a>softdevice_ble_evt_handler_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_ble_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[129]"></a>softdevice_enable</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, softdevice_handler.o(i.softdevice_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = softdevice_enable &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_end_address_get
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[127]"></a>softdevice_enable_get_default_config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, softdevice_handler.o(i.softdevice_enable_get_default_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = softdevice_enable_get_default_config
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[3b]"></a>softdevice_fault_handler</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, softdevice_handler.o(i.softdevice_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = softdevice_fault_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> softdevice_handler.o(i.softdevice_handler_init)
</UL>
<P><STRONG><a name="[126]"></a>softdevice_handler_init</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, softdevice_handler.o(i.softdevice_handler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = softdevice_handler_init &rArr; log_rtt_init &rArr; SEGGER_RTT_ConfigUpBuffer &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_init
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[130]"></a>softdevice_handler_sd_disable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, softdevice_handler.o(i.softdevice_handler_sd_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = softdevice_handler_sd_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_stop
</UL>

<P><STRONG><a name="[12b]"></a>softdevice_sys_evt_handler_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_sys_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[1cf]"></a>timers_init_and_start</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, main.o(i.timers_init_and_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = timers_init_and_start &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1d1]"></a>power_manage</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, main.o(i.power_manage))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = power_manage &rArr; key_sense_turbo &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mouse_and_send_change
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_sense_turbo
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_syetem_off
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_change_data_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[192]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_app_gzll_device.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzll_app_stop
</UL>

<P><STRONG><a name="[244]"></a>btn_read_pin_state</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_app_gzll_device.o(i.btn_read_pin_state))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_24_mode_communication
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mouse_and_send2
</UL>

<P><STRONG><a name="[187]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_app_gzll_device.o(i.nrf_gpio_pin_read))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mouse_and_send2
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gazell_mode_init
</UL>

<P><STRONG><a name="[6e]"></a>btn_read_pin_state</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_app_gzll_ui.o(i.btn_read_pin_state))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_sense_turbo
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BETOP_switch_check
</UL>

<P><STRONG><a name="[150]"></a>nrf_gpio_cfg</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, ble_app_gzll_ui.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpiote_interrupt_set
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_init_Judge
</UL>

<P><STRONG><a name="[6c]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, ble_app_gzll_ui.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_init_Judge
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BETOP_switch_check
</UL>

<P><STRONG><a name="[75]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_app_gzll_ui.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash_time
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_FALSH_update
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_init_Judge
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_syetem_off
</UL>

<P><STRONG><a name="[76]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_app_gzll_ui.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash_time
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_FALSH_update
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_init_Judge
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_sense_turbo
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_syetem_off
</UL>

<P><STRONG><a name="[6d]"></a>nrf_gpio_pins_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_app_gzll_ui.o(i.nrf_gpio_pins_read))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_sense_turbo
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BETOP_switch_check
</UL>

<P><STRONG><a name="[b3]"></a>advertising_init</STRONG> (Thumb, 90 bytes, Stack size 112 bytes, ble_app_gzll_hid.o(i.advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hid_app_start
</UL>

<P><STRONG><a name="[b7]"></a>advertising_start</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ble_app_gzll_hid.o(i.advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = advertising_start &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hid_app_start
</UL>

<P><STRONG><a name="[b9]"></a>advertising_stop</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ble_app_gzll_hid.o(i.advertising_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = advertising_stop &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_prepare
</UL>

<P><STRONG><a name="[da]"></a>application_timers_start</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ble_app_gzll_hid.o(i.application_timers_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = application_timers_start &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hid_app_start
</UL>

<P><STRONG><a name="[e6]"></a>bas_init</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, ble_app_gzll_hid.o(i.bas_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = bas_init &rArr; ble_bas_init &rArr; battery_level_char_add &rArr; ble_srv_report_ref_encode &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[29]"></a>battery_level_meas_timeout_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ble_app_gzll_hid.o(i.battery_level_meas_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = battery_level_meas_timeout_handler &rArr; battery_level_update &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_app_gzll_hid.o(i.application_timers_start)
</UL>
<P><STRONG><a name="[ea]"></a>battery_level_update</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, ble_app_gzll_hid.o(i.battery_level_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = battery_level_update &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_battery_level_update
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_meas_timeout_handler
</UL>

<P><STRONG><a name="[27]"></a>ble_advertising_error_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_app_gzll_hid.o(i.ble_advertising_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ble_advertising_error_handler &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_app_gzll_hid.o(i.advertising_init)
</UL>
<P><STRONG><a name="[2d]"></a>ble_evt_dispatch</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ble_app_gzll_hid.o(i.ble_evt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ble_evt_dispatch &rArr; dm_ble_evt_handler &rArr; device_instance_free &rArr; pstorage_clear &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; update_operation_execute &rArr; clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_on_ble_evt
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_on_ble_evt
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_app_gzll_hid.o(i.ble_stack_init)
</UL>
<P><STRONG><a name="[125]"></a>ble_stack_init</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, ble_app_gzll_hid.o(i.ble_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ble_stack_init &rArr; softdevice_enable &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_sys_evt_handler_set
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable_get_default_config
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_ble_evt_handler_set
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_check_ram_start
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_start
</UL>

<P><STRONG><a name="[245]"></a>btn_read_pin_state</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_app_gzll_hid.o(i.btn_read_pin_state))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mouse_and_send_change
</UL>

<P><STRONG><a name="[2f]"></a>conn_params_error_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_app_gzll_hid.o(i.conn_params_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = conn_params_error_handler &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_app_gzll_hid.o(i.conn_params_init)
</UL>
<P><STRONG><a name="[10c]"></a>conn_params_init</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, ble_app_gzll_hid.o(i.conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = conn_params_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hid_app_start
</UL>

<P><STRONG><a name="[33]"></a>device_manager_evt_handler</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ble_app_gzll_hid.o(i.device_manager_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = device_manager_evt_handler &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_app_gzll_hid.o(i.device_manager_init)
</UL>
<P><STRONG><a name="[109]"></a>device_manager_init</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, ble_app_gzll_hid.o(i.device_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = device_manager_init &rArr; dm_init &rArr; pstorage_clear &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; update_operation_execute &rArr; clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_register
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handle_initialize
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hid_app_start
</UL>

<P><STRONG><a name="[166]"></a>dis_init</STRONG> (Thumb, 138 bytes, Stack size 88 bytes, ble_app_gzll_hid.o(i.dis_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = dis_init &rArr; ble_dis_init &rArr; char_add &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_ascii_to_utf8
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[10a]"></a>gap_params_init</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ble_app_gzll_hid.o(i.gap_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = gap_params_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hid_app_start
</UL>

<P><STRONG><a name="[1b5]"></a>hids_init</STRONG> (Thumb, 1004 bytes, Stack size 144 bytes, ble_app_gzll_hid.o(i.hids_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = hids_init &rArr; ble_hids_init &rArr; inp_rep_characteristics_add &rArr; rep_char_add &rArr; ble_srv_report_ref_encode &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[1b6]"></a>home_key_press_send</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ble_app_gzll_hid.o(i.home_key_press_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = home_key_press_send &rArr; ble_hids_inp_rep_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_inp_rep_send
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mouse_and_send_change
</UL>

<P><STRONG><a name="[1b8]"></a>home_key_release_send</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ble_app_gzll_hid.o(i.home_key_release_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = home_key_release_send &rArr; ble_hids_inp_rep_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_inp_rep_send
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mouse_and_send_change
</UL>

<P><STRONG><a name="[246]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_app_gzll_hid.o(i.nrf_gpio_pin_read))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mouse_and_send_change
</UL>

<P><STRONG><a name="[3a]"></a>nus_data_handler</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ble_app_gzll_hid.o(i.nus_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nus_data_handler &rArr; app_uart_put &rArr; app_fifo_get &rArr; fifo_get &rArr; fifo_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_app_gzll_hid.o(i.nus_init)
</UL>
<P><STRONG><a name="[231]"></a>nus_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ble_app_gzll_hid.o(i.nus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = nus_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[28]"></a>on_adv_evt</STRONG> (Thumb, 220 bytes, Stack size 96 bytes, ble_app_gzll_hid.o(i.on_adv_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = on_adv_evt &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_syetem_off
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_whitelist_create
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_peer_addr_get
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_whitelist_reply
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_peer_addr_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_app_gzll_hid.o(i.advertising_init)
</UL>
<P><STRONG><a name="[106]"></a>on_ble_evt</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, ble_app_gzll_hid.o(i.on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = on_ble_evt &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[235]"></a>on_hid_rep_char_write</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, ble_app_gzll_hid.o(i.on_hid_rep_char_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = on_hid_rep_char_write &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_string_send
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_outp_rep_get
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hids_evt
</UL>

<P><STRONG><a name="[35]"></a>on_hids_evt</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, ble_app_gzll_hid.o(i.on_hids_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = on_hids_evt &rArr; on_hid_rep_char_write &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hid_rep_char_write
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_service_context_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_app_gzll_hid.o(i.hids_init)
</UL>
<P><STRONG><a name="[12e]"></a>reset_prepare</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ble_app_gzll_hid.o(i.reset_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = reset_prepare &rArr; advertising_stop &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_stop
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_stop
</UL>

<P><STRONG><a name="[12f]"></a>sd_nvic_DisableIRQ</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, ble_app_gzll_hid.o(i.sd_nvic_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_stop
</UL>

<P><STRONG><a name="[36]"></a>service_error_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_app_gzll_hid.o(i.service_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = service_error_handler &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_app_gzll_hid.o(i.hids_init)
</UL>
<P><STRONG><a name="[10b]"></a>services_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_app_gzll_hid.o(i.services_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = services_init &rArr; hids_init &rArr; ble_hids_init &rArr; inp_rep_characteristics_add &rArr; rep_char_add &rArr; ble_srv_report_ref_encode &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bas_init
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hid_app_start
</UL>

<P><STRONG><a name="[2e]"></a>sys_evt_dispatch</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_app_gzll_hid.o(i.sys_evt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = sys_evt_dispatch &rArr; ble_advertising_on_sys_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_sys_event_handler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_sys_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_app_gzll_hid.o(i.ble_stack_init)
</UL>
<P><STRONG><a name="[93]"></a>adc_config</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, ble_app_adc.o(i.adc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = adc_config &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_channel_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[25]"></a>adc_event_handler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ble_app_adc.o(i.adc_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = adc_event_handler &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_buffer_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_app_adc.o(i.adc_config)
</UL>
<P><STRONG><a name="[9d]"></a>adc_sampling_event_enable</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ble_app_adc.o(i.adc_sampling_event_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = adc_sampling_event_enable &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[9c]"></a>adc_sampling_event_init</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, ble_app_adc.o(i.adc_sampling_event_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = adc_sampling_event_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_extended_compare
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_enable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_assign
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[26]"></a>timer_handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_app_adc.o(i.timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_app_adc.o(i.adc_sampling_event_init)
</UL>
<P><STRONG><a name="[145]"></a>gzp_index_db_add</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, ble_app_store.o(i.gzp_index_db_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = gzp_index_db_add &rArr; pstorage_flash_page_end &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nvmc_write_byte
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nvmc_page_erase
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_store
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_mode_check
</UL>

<P><STRONG><a name="[144]"></a>gzp_index_db_read</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ble_app_store.o(i.gzp_index_db_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = gzp_index_db_read &rArr; pstorage_flash_page_end &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_mode_check
</UL>

<P><STRONG><a name="[1a0]"></a>pstorage_flash_page_end</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ble_app_store.o(i.pstorage_flash_page_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = pstorage_flash_page_end &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_index_db_read
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_index_db_add
</UL>

<P><STRONG><a name="[1a1]"></a>pstorage_flash_page_size</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_app_store.o(i.pstorage_flash_page_size))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_index_db_read
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_index_db_add
</UL>

<P><STRONG><a name="[3d]"></a>bsp_button_event_handler</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, bsp.o(i.bsp_button_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bsp_button_event_handler &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(.constdata)
</UL>
<P><STRONG><a name="[134]"></a>bsp_led_indication</STRONG> (Thumb, 1362 bytes, Stack size 24 bytes, bsp.o(i.bsp_led_indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
</UL>

<P><STRONG><a name="[ed]"></a>advdata_check</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ble_advdata.o(i.advdata_check))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[ab]"></a>appearance_encode</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ble_advdata.o(i.appearance_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = appearance_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[aa]"></a>ble_device_addr_encode</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, ble_advdata.o(i.ble_device_addr_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_device_addr_encode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[14b]"></a>conn_int_check</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, ble_advdata.o(i.conn_int_check))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
</UL>

<P><STRONG><a name="[af]"></a>conn_int_encode</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, ble_advdata.o(i.conn_int_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = conn_int_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_check
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[ac]"></a>flags_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ble_advdata.o(i.flags_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = flags_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[a9]"></a>le_role_encode</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, ble_advdata.o(i.le_role_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = le_role_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[b0]"></a>manuf_specific_data_encode</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, ble_advdata.o(i.manuf_specific_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = manuf_specific_data_encode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[b2]"></a>name_encode</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, ble_advdata.o(i.name_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = name_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[a7]"></a>sec_mgr_oob_flags_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ble_advdata.o(i.sec_mgr_oob_flags_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sec_mgr_oob_flags_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[b1]"></a>service_data_encode</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, ble_advdata.o(i.service_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = service_data_encode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[ee]"></a>srdata_check</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_advdata.o(i.srdata_check))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[a8]"></a>tk_value_encode</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ble_advdata.o(i.tk_value_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tk_value_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[ad]"></a>tx_power_level_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ble_advdata.o(i.tx_power_level_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tx_power_level_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[d9]"></a>uint16_encode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_advdata.o(i.uint16_encode))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appearance_encode
</UL>

<P><STRONG><a name="[ae]"></a>uuid_list_encode</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, ble_advdata.o(i.uuid_list_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[260]"></a>uuid_list_sized_encode</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, ble_advdata.o(i.uuid_list_sized_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
</UL>

<P><STRONG><a name="[ef]"></a>ble_advertising_peer_address_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_peer_address_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_advertising_peer_address_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[f2]"></a>flash_access_in_progress</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ble_advertising.o(i.flash_access_in_progress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_access_in_progress
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_access_status_get
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_queued_op_count_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[f3]"></a>peer_address_exists</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ble_advertising.o(i.peer_address_exists))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[f4]"></a>whitelist_has_entries</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_advertising.o(i.whitelist_has_entries))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[e8]"></a>battery_level_char_add</STRONG> (Thumb, 448 bytes, Stack size 88 bytes, ble_bas.o(i.battery_level_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = battery_level_char_add &rArr; ble_srv_report_ref_encode &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_report_ref_encode
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_init
</UL>

<P><STRONG><a name="[f6]"></a>on_connect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_bas.o(i.on_connect))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_on_ble_evt
</UL>

<P><STRONG><a name="[f7]"></a>on_disconnect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_bas.o(i.on_disconnect))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_on_ble_evt
</UL>

<P><STRONG><a name="[f8]"></a>on_write</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ble_bas.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = on_write
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_on_ble_evt
</UL>

<P><STRONG><a name="[14c]"></a>conn_params_negotiation</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ble_conn_params.o(i.conn_params_negotiation))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>

<P><STRONG><a name="[14d]"></a>is_conn_params_ok</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ble_conn_params.o(i.is_conn_params_ok))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>

<P><STRONG><a name="[fe]"></a>on_conn_params_update</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_conn_params.o(i.on_conn_params_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = on_conn_params_update &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[fb]"></a>on_connect</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ble_conn_params.o(i.on_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = on_connect &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[fc]"></a>on_disconnect</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ble_conn_params.o(i.on_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = on_disconnect &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[fd]"></a>on_write</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ble_conn_params.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = on_write &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[2c]"></a>update_timeout_handler</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, ble_conn_params.o(i.update_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_timeout_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P><STRONG><a name="[101]"></a>char_add</STRONG> (Thumb, 232 bytes, Stack size 80 bytes, ble_dis.o(i.char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = char_add &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
</UL>

<P><STRONG><a name="[103]"></a>pnp_id_encode</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, ble_dis.o(i.pnp_id_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pnp_id_encode &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
</UL>

<P><STRONG><a name="[102]"></a>sys_id_encode</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, ble_dis.o(i.sys_id_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sys_id_encode &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
</UL>

<P><STRONG><a name="[23e]"></a>uint16_encode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_dis.o(i.uint16_encode))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnp_id_encode
</UL>

<P><STRONG><a name="[115]"></a>boot_inp_rep_char_add</STRONG> (Thumb, 264 bytes, Stack size 80 bytes, ble_hids.o(i.boot_inp_rep_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = boot_inp_rep_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_init
</UL>

<P><STRONG><a name="[116]"></a>boot_kb_outp_rep_char_add</STRONG> (Thumb, 196 bytes, Stack size 72 bytes, ble_hids.o(i.boot_kb_outp_rep_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = boot_kb_outp_rep_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_init
</UL>

<P><STRONG><a name="[16d]"></a>encode_hid_information</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ble_hids.o(i.encode_hid_information))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = encode_hid_information &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_information_char_add
</UL>

<P><STRONG><a name="[113]"></a>feature_rep_characteristics_add</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, ble_hids.o(i.feature_rep_characteristics_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = feature_rep_characteristics_add &rArr; rep_char_add &rArr; ble_srv_report_ref_encode &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rep_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_init
</UL>

<P><STRONG><a name="[118]"></a>hid_control_point_char_add</STRONG> (Thumb, 170 bytes, Stack size 72 bytes, ble_hids.o(i.hid_control_point_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hid_control_point_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_init
</UL>

<P><STRONG><a name="[117]"></a>hid_information_char_add</STRONG> (Thumb, 184 bytes, Stack size 80 bytes, ble_hids.o(i.hid_information_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = hid_information_char_add &rArr; encode_hid_information &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_hid_information
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_init
</UL>

<P><STRONG><a name="[10f]"></a>includes_add</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ble_hids.o(i.includes_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = includes_add
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_init
</UL>

<P><STRONG><a name="[1b9]"></a>inp_rep_cccd_identify</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ble_hids.o(i.inp_rep_cccd_identify))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = inp_rep_cccd_identify &rArr; make_char_id
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_char_id
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
</UL>

<P><STRONG><a name="[111]"></a>inp_rep_characteristics_add</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, ble_hids.o(i.inp_rep_characteristics_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = inp_rep_characteristics_add &rArr; rep_char_add &rArr; ble_srv_report_ref_encode &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rep_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_init
</UL>

<P><STRONG><a name="[1ba]"></a>make_char_id</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_hids.o(i.make_char_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = make_char_id
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rep_value_identify
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inp_rep_cccd_identify
</UL>

<P><STRONG><a name="[119]"></a>on_connect</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, ble_hids.o(i.on_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = on_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_on_ble_evt
</UL>

<P><STRONG><a name="[23a]"></a>on_control_point_write</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, ble_hids.o(i.on_control_point_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = on_control_point_write
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
</UL>

<P><STRONG><a name="[11a]"></a>on_disconnect</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_hids.o(i.on_disconnect))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_on_ble_evt
</UL>

<P><STRONG><a name="[23b]"></a>on_protocol_mode_write</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, ble_hids.o(i.on_protocol_mode_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = on_protocol_mode_write
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
</UL>

<P><STRONG><a name="[23c]"></a>on_report_cccd_write</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, ble_hids.o(i.on_report_cccd_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_report_cccd_write
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
</UL>

<P><STRONG><a name="[239]"></a>on_report_value_read_auth</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, ble_hids.o(i.on_report_value_read_auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_report_value_read_auth
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rw_authorize_request
</UL>

<P><STRONG><a name="[23d]"></a>on_report_value_write</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, ble_hids.o(i.on_report_value_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_report_value_write
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
</UL>

<P><STRONG><a name="[11c]"></a>on_rw_authorize_request</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ble_hids.o(i.on_rw_authorize_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = on_rw_authorize_request &rArr; on_report_value_read_auth
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rep_value_identify
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_report_value_read_auth
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_on_ble_evt
</UL>

<P><STRONG><a name="[11b]"></a>on_write</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, ble_hids.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = on_write &rArr; on_report_value_write
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rep_value_identify
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_report_value_write
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_report_cccd_write
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_protocol_mode_write
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_control_point_write
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_char_id
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inp_rep_cccd_identify
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_on_ble_evt
</UL>

<P><STRONG><a name="[112]"></a>outp_rep_characteristics_add</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, ble_hids.o(i.outp_rep_characteristics_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = outp_rep_characteristics_add &rArr; rep_char_add &rArr; ble_srv_report_ref_encode &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rep_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_init
</UL>

<P><STRONG><a name="[110]"></a>protocol_mode_char_add</STRONG> (Thumb, 178 bytes, Stack size 72 bytes, ble_hids.o(i.protocol_mode_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = protocol_mode_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_init
</UL>

<P><STRONG><a name="[170]"></a>rep_char_add</STRONG> (Thumb, 388 bytes, Stack size 104 bytes, ble_hids.o(i.rep_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rep_char_add &rArr; ble_srv_report_ref_encode &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_report_ref_encode
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outp_rep_characteristics_add
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inp_rep_characteristics_add
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature_rep_characteristics_add
</UL>

<P><STRONG><a name="[114]"></a>rep_map_char_add</STRONG> (Thumb, 424 bytes, Stack size 96 bytes, ble_hids.o(i.rep_map_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rep_map_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_init
</UL>

<P><STRONG><a name="[238]"></a>rep_value_identify</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, ble_hids.o(i.rep_value_identify))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rep_value_identify &rArr; make_char_id
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_char_id
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rw_authorize_request
</UL>

<P><STRONG><a name="[168]"></a>app_evt_notify</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, device_manager_peripheral.o(i.app_evt_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_evt_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
</UL>

<P><STRONG><a name="[167]"></a>connection_instance_find</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, device_manager_peripheral.o(i.connection_instance_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = connection_instance_find
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[14e]"></a>connection_instance_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, device_manager_peripheral.o(i.connection_instance_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = connection_instance_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[155]"></a>device_context_store</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, device_manager_peripheral.o(i.device_context_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = device_context_store &rArr; pstorage_block_identifier_get
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[15c]"></a>device_instance_allocate</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, device_manager_peripheral.o(i.device_instance_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = device_instance_allocate &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[15d]"></a>device_instance_find</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, device_manager_peripheral.o(i.device_instance_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = device_instance_find &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[15f]"></a>device_instance_free</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, device_manager_peripheral.o(i.device_instance_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = device_instance_free &rArr; pstorage_clear &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; update_operation_execute &rArr; clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_instance_init
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[34]"></a>dm_pstorage_cb_handler</STRONG> (Thumb, 474 bytes, Stack size 112 bytes, device_manager_peripheral.o(i.dm_pstorage_cb_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = dm_pstorage_cb_handler &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handle_initialize
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_status_bit_reset
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_evt_notify
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(i.dm_init)
</UL>
<P><STRONG><a name="[48]"></a>gattc_context_apply</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.gattc_context_apply))
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>gattc_context_load</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.gattc_context_load))
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[40]"></a>gattc_context_store</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.gattc_context_store))
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>gatts_context_apply</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, device_manager_peripheral.o(i.gatts_context_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gatts_context_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattsc_context_apply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>gatts_context_load</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, device_manager_peripheral.o(i.gatts_context_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gatts_context_load &rArr; pstorage_load &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattsc_context_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>gatts_context_store</STRONG> (Thumb, 184 bytes, Stack size 88 bytes, device_manager_peripheral.o(i.gatts_context_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = gatts_context_store &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattsc_context_store
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>gattsc_context_apply</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, device_manager_peripheral.o(i.gattsc_context_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gattsc_context_apply &rArr; gatts_context_apply
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_apply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>gattsc_context_load</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, device_manager_peripheral.o(i.gattsc_context_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gattsc_context_load &rArr; gatts_context_load &rArr; pstorage_load &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[41]"></a>gattsc_context_store</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, device_manager_peripheral.o(i.gattsc_context_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = gattsc_context_store &rArr; gatts_context_store &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_store
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>no_service_context_apply</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.no_service_context_apply))
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>no_service_context_load</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.no_service_context_load))
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[3e]"></a>no_service_context_store</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.no_service_context_store))
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[161]"></a>peer_instance_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, device_manager_peripheral.o(i.peer_instance_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = peer_instance_init
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_status_bit_reset
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_free
</UL>

<P><STRONG><a name="[32]"></a>storage_operation_dummy_handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, device_manager_peripheral.o(i.storage_operation_dummy_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = storage_operation_dummy_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(i.device_context_store)
</UL>
<P><STRONG><a name="[16b]"></a>update_status_bit_reset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.update_status_bit_reset))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_instance_init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
</UL>

<P><STRONG><a name="[120]"></a>on_connect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_nus.o(i.on_connect))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>

<P><STRONG><a name="[121]"></a>on_disconnect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_nus.o(i.on_disconnect))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>

<P><STRONG><a name="[122]"></a>on_write</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ble_nus.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_write
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>

<P><STRONG><a name="[11e]"></a>rx_char_add</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, ble_nus.o(i.rx_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
</UL>

<P><STRONG><a name="[11f]"></a>tx_char_add</STRONG> (Thumb, 222 bytes, Stack size 72 bytes, ble_nus.o(i.tx_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
</UL>

<P><STRONG><a name="[1e0]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, nrf_drv_common.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>

<P><STRONG><a name="[71]"></a>channel_handler_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[72]"></a>channel_port_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[73]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_cfg_sense_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[1f6]"></a>nrf_gpiote_event_addr_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_addr_get))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
</UL>

<P><STRONG><a name="[70]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[6f]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_is_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[1e9]"></a>nrf_drv_uart_tx_for_uart</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.nrf_drv_uart_tx_for_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_uart_tx_for_uart &rArr; tx_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[25c]"></a>nrf_uart_errorsrc_get_and_clear</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_errorsrc_get_and_clear))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[1ed]"></a>nrf_uart_event_check</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uart
</UL>

<P><STRONG><a name="[1ea]"></a>nrf_uart_event_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_event_clear))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uart
</UL>

<P><STRONG><a name="[25b]"></a>nrf_uart_int_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[25a]"></a>nrf_uart_int_enable_check</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_int_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[1eb]"></a>nrf_uart_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uart
</UL>

<P><STRONG><a name="[247]"></a>rx_byte</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.rx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rx_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[25d]"></a>rx_done_event</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[1ec]"></a>tx_byte</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.tx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tx_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uart
</UL>

<P><STRONG><a name="[25e]"></a>tx_done_event</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[8f]"></a>uart_irq_handler</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.uart_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uart_irq_handler &rArr; rx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable_check
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_disable
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_errorsrc_get_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>app_notify</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, pstorage.o(i.app_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify_error_state_transit
</UL>

<P><STRONG><a name="[c2]"></a>app_notify_error_state_transit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pstorage.o(i.app_notify_error_state_transit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_failure_run
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_api_err_code_process
</UL>

<P><STRONG><a name="[137]"></a>clear_operation_execute</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, pstorage.o(i.clear_operation_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_word_size_calculate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_operation_execute
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
</UL>

<P><STRONG><a name="[13a]"></a>clear_post_processing_run</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pstorage.o(i.clear_post_processing_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = clear_post_processing_run &rArr; store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_operation_execute
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_sm_exit_action_run
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sub_state_sm_run
</UL>

<P><STRONG><a name="[13d]"></a>cmd_process</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, pstorage.o(i.cmd_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = cmd_process &rArr; update_operation_execute &rArr; clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_operation_execute
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_operation_execute
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_dequeue
</UL>

<P><STRONG><a name="[13f]"></a>cmd_queue_dequeue</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pstorage.o(i.cmd_queue_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = cmd_queue_dequeue &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_idle_entry_run
</UL>

<P><STRONG><a name="[142]"></a>cmd_queue_element_init</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, pstorage.o(i.cmd_queue_element_init))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_queue_element_consume
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_init
</UL>

<P><STRONG><a name="[140]"></a>cmd_queue_enqueue</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, pstorage.o(i.cmd_queue_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = cmd_queue_enqueue &rArr; cmd_process &rArr; update_operation_execute &rArr; clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_update
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_store
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
</UL>

<P><STRONG><a name="[141]"></a>cmd_queue_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pstorage.o(i.cmd_queue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmd_queue_init
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_element_init
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_init
</UL>

<P><STRONG><a name="[13b]"></a>command_end_procedure_run</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pstorage.o(i.command_end_procedure_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = command_end_procedure_run &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_queue_element_consume
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_sub_state_sm_run
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
</UL>

<P><STRONG><a name="[146]"></a>command_queue_element_consume</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pstorage.o(i.command_queue_element_consume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = command_queue_element_consume
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_element_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
</UL>

<P><STRONG><a name="[51]"></a>data_page_erase_state_run</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, pstorage.o(i.data_page_erase_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = data_page_erase_state_run &rArr; swap_sub_sm_exit_action_run &rArr; clear_post_processing_run &rArr; store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_sm_exit_action_run
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>data_to_swap_write_state_run</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, pstorage.o(i.data_to_swap_write_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = data_to_swap_write_state_run &rArr; swap_sub_state_err_busy_process &rArr; swap_sub_state_state_change &rArr; swap_sub_state_entry_action_run
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[16e]"></a>erase_sub_state_sm_run</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, pstorage.o(i.erase_sub_state_sm_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = erase_sub_state_sm_run &rArr; clear_post_processing_run &rArr; store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_state_err_busy_process
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
</UL>

<P><STRONG><a name="[174]"></a>flash_api_err_code_process</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, pstorage.o(i.flash_api_err_code_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify_error_state_transit
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
</UL>

<P><STRONG><a name="[175]"></a>flash_operation_failure_run</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, pstorage.o(i.flash_operation_failure_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = flash_operation_failure_run &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify_error_state_transit
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_sys_event_handler
</UL>

<P><STRONG><a name="[176]"></a>flash_operation_success_run</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, pstorage.o(i.flash_operation_success_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = flash_operation_success_run &rArr; erase_sub_state_sm_run &rArr; clear_post_processing_run &rArr; store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_sm_run
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_sub_state_sm_run
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sub_state_sm_run
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_sys_event_handler
</UL>

<P><STRONG><a name="[179]"></a>flash_page_erase</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, pstorage.o(i.flash_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = flash_page_erase &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_api_err_code_process
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_swap_erase_entry_run
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_erase_data_page_entry_run
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_data_erase_entry_run
</UL>

<P><STRONG><a name="[17a]"></a>flash_write</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, pstorage.o(i.flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_api_err_code_process
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_cmd_flash_write_execute
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_write_data_swap_entry_run
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_tail_entry_run
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_head_entry_run
</UL>

<P><STRONG><a name="[53]"></a>head_restore_state_run</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, pstorage.o(i.head_restore_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = head_restore_state_run &rArr; swap_sub_sm_exit_action_run &rArr; clear_post_processing_run &rArr; store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_sm_exit_action_run
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_tail_data_page_swap_required
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[152]"></a>is_page_erase_required</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, pstorage.o(i.is_page_erase_required))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = is_page_erase_required &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sub_state_sm_run
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[1b4]"></a>is_tail_data_page_swap_required</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, pstorage.o(i.is_tail_data_page_swap_required))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = is_tail_data_page_swap_required &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
</UL>

<P><STRONG><a name="[240]"></a>is_word_aligned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pstorage.o(i.is_word_aligned))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_update
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_store
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
</UL>

<P><STRONG><a name="[16f]"></a>main_state_err_busy_process</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pstorage.o(i.main_state_err_busy_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = main_state_err_busy_process &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_sub_state_sm_run
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sub_state_sm_run
</UL>

<P><STRONG><a name="[241]"></a>pstorage_flash_page_end</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pstorage.o(i.pstorage_flash_page_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = pstorage_flash_page_end &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_register
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_write_data_swap_entry_run
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_swap_erase_entry_run
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_tail_entry_run
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_head_entry_run
</UL>

<P><STRONG><a name="[138]"></a>pstorage_flash_page_size</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pstorage.o(i.pstorage_flash_page_size))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_register
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_word_size_calculate
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_cmd_flash_write_execute
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_write_data_swap_entry_run
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_swap_erase_entry_run
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_tail_entry_run
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_head_entry_run
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_data_erase_swap_entry_run
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_tail_data_page_swap_required
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
</UL>

<P><STRONG><a name="[c4]"></a>sm_state_change</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pstorage.o(i.sm_state_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_entry_action_run
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_operation_execute
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_state_err_busy_process
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_failure_run
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sub_state_sm_run
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify_error_state_transit
</UL>

<P><STRONG><a name="[24d]"></a>state_data_erase_entry_run</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pstorage.o(i.state_data_erase_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = state_data_erase_entry_run &rArr; flash_page_erase &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_entry_action_run
</UL>

<P><STRONG><a name="[24e]"></a>state_data_erase_swap_entry_run</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, pstorage.o(i.state_data_erase_swap_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = state_data_erase_swap_entry_run &rArr; swap_sub_state_state_change &rArr; swap_sub_state_entry_action_run
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_entry_action_run
</UL>

<P><STRONG><a name="[24b]"></a>state_entry_action_run</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, pstorage.o(i.state_entry_action_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_store_entry_run
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_idle_entry_run
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_data_erase_swap_entry_run
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_data_erase_entry_run
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
</UL>

<P><STRONG><a name="[4c]"></a>state_erase_data_page_entry_run</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pstorage.o(i.state_erase_data_page_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = state_erase_data_page_entry_run &rArr; flash_page_erase &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[24f]"></a>state_idle_entry_run</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pstorage.o(i.state_idle_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = state_idle_entry_run &rArr; cmd_queue_dequeue &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_entry_action_run
</UL>

<P><STRONG><a name="[4e]"></a>state_restore_head_entry_run</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pstorage.o(i.state_restore_head_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = state_restore_head_entry_run &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>state_restore_tail_entry_run</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, pstorage.o(i.state_restore_tail_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = state_restore_tail_entry_run &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[250]"></a>state_store_entry_run</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pstorage.o(i.state_store_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_cmd_flash_write_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_entry_action_run
</UL>

<P><STRONG><a name="[4a]"></a>state_swap_erase_entry_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, pstorage.o(i.state_swap_erase_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = state_swap_erase_entry_run &rArr; flash_page_erase &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>state_write_data_swap_entry_run</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, pstorage.o(i.state_write_data_swap_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = state_write_data_swap_entry_run &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[251]"></a>store_cmd_flash_write_execute</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, pstorage.o(i.store_cmd_flash_write_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_sub_state_sm_run
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_store_entry_run
</UL>

<P><STRONG><a name="[13c]"></a>store_operation_execute</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pstorage.o(i.store_operation_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
</UL>

<P><STRONG><a name="[177]"></a>store_sub_state_sm_run</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, pstorage.o(i.store_sub_state_sm_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = store_sub_state_sm_run &rArr; main_state_err_busy_process &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_cmd_flash_write_execute
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_state_err_busy_process
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
</UL>

<P><STRONG><a name="[4f]"></a>swap_erase_state_run</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pstorage.o(i.swap_erase_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = swap_erase_state_run &rArr; swap_sub_state_err_busy_process &rArr; swap_sub_state_state_change &rArr; swap_sub_state_entry_action_run
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[153]"></a>swap_sub_sm_exit_action_run</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pstorage.o(i.swap_sub_sm_exit_action_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = swap_sub_sm_exit_action_run &rArr; clear_post_processing_run &rArr; store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_restore_state_run
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[252]"></a>swap_sub_state_entry_action_run</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pstorage.o(i.swap_sub_state_entry_action_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = swap_sub_state_entry_action_run
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
</UL>

<P><STRONG><a name="[154]"></a>swap_sub_state_err_busy_process</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pstorage.o(i.swap_sub_state_err_busy_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = swap_sub_state_err_busy_process &rArr; swap_sub_state_state_change &rArr; swap_sub_state_entry_action_run
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_restore_state_run
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_erase_state_run
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_to_swap_write_state_run
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[178]"></a>swap_sub_state_sm_run</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pstorage.o(i.swap_sub_state_sm_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = swap_sub_state_sm_run
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
</UL>

<P><STRONG><a name="[151]"></a>swap_sub_state_state_change</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pstorage.o(i.swap_sub_state_state_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = swap_sub_state_state_change &rArr; swap_sub_state_entry_action_run
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_entry_action_run
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_erase_state_run
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_data_erase_swap_entry_run
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_failure_run
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_to_swap_write_state_run
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[52]"></a>tail_restore_state_run</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pstorage.o(i.tail_restore_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tail_restore_state_run &rArr; swap_sub_sm_exit_action_run &rArr; clear_post_processing_run &rArr; store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_sm_exit_action_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[139]"></a>tail_word_size_calculate</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, pstorage.o(i.tail_word_size_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = tail_word_size_calculate &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
</UL>

<P><STRONG><a name="[13e]"></a>update_operation_execute</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pstorage.o(i.update_operation_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = update_operation_execute &rArr; clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
</UL>

<P><STRONG><a name="[6a]"></a>adc_sample_process</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, nrf_drv_adc.o(i.adc_sample_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_sample_process
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_event_clear
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_config_set
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_buffer_convert
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>nrf_adc_config_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_adc_config_set))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_buffer_convert
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample_process
</UL>

<P><STRONG><a name="[1de]"></a>nrf_adc_event_check</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_adc_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_buffer_convert
</UL>

<P><STRONG><a name="[68]"></a>nrf_adc_event_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_adc_event_clear))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_buffer_convert
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample_process
</UL>

<P><STRONG><a name="[69]"></a>nrf_adc_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_adc_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_uninit
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[1dd]"></a>nrf_adc_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_adc_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_buffer_convert
</UL>

<P><STRONG><a name="[1c1]"></a>are_app_channels</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_ppi.o(i.are_app_channels))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_app_channel
</UL>

<P><STRONG><a name="[1be]"></a>is_allocated_channel</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_drv_ppi.o(i.is_allocated_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_allocated_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_to_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_enable
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_disable
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_assign
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_alloc
</UL>

<P><STRONG><a name="[1c0]"></a>is_app_channel</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrf_drv_ppi.o(i.is_app_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_to_mask
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_app_channels
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_enable
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_disable
</UL>

<P><STRONG><a name="[1c2]"></a>is_programmable_app_channel</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf_drv_ppi.o(i.is_programmable_app_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_programmable_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_to_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_enable
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_disable
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_assign
</UL>

<P><STRONG><a name="[1bf]"></a>nrf_drv_ppi_channel_to_mask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channel_to_mask))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_alloc
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_programmable_app_channel
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_app_channel
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_channel
</UL>

<P><STRONG><a name="[1e1]"></a>nrf_ppi_channel_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_ppi.o(i.nrf_ppi_channel_disable))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_disable
</UL>

<P><STRONG><a name="[8e]"></a>irq_handler</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, nrf_drv_timer.o(i.irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = irq_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_int_get
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_event_get
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[1e8]"></a>nrf_drv_get_IRQn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_drv_get_IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_uninit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_init
</UL>

<P><STRONG><a name="[1bb]"></a>nrf_timer_compare_event_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_timer_compare_event_get))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[1bc]"></a>nrf_timer_compare_int_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_timer_compare_int_get))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[1bd]"></a>nrf_timer_event_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_timer_event_clear))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[1e4]"></a>nrf_timer_int_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_timer_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_uninit
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare
</UL>

<P><STRONG><a name="[1e3]"></a>nrf_timer_int_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_timer_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare
</UL>

<P><STRONG><a name="[1e7]"></a>nrf_timer_shorts_disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_timer_shorts_disable))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_uninit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_extended_compare
</UL>

<P><STRONG><a name="[1e6]"></a>nrf_timer_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_timer_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_enable
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_disable
</UL>

<P><STRONG><a name="[bf]"></a>fifo_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_fifo.o(i.fifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fifo_get &rArr; fifo_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_peek
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>

<P><STRONG><a name="[be]"></a>fifo_length</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_fifo.o(i.fifo_length))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>

<P><STRONG><a name="[171]"></a>fifo_peek</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_fifo.o(i.fifo_peek))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fifo_peek
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_get
</UL>

<P><STRONG><a name="[c1]"></a>fifo_put</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_fifo.o(i.fifo_put))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
</UL>

<P><STRONG><a name="[d7]"></a>__sd_nvic_irq_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_util_platform.o(i.__sd_nvic_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>

<P><STRONG><a name="[c7]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_timer_ble_gzll.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>

<P><STRONG><a name="[c9]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_timer_ble_gzll.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>

<P><STRONG><a name="[257]"></a>NVIC_SetPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_timer_ble_gzll.o(i.NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check_sched
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>

<P><STRONG><a name="[c8]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, app_timer_ble_gzll.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_init
</UL>

<P><STRONG><a name="[147]"></a>compare_reg_update</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, app_timer_ble_gzll.o(i.compare_reg_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = compare_reg_update &rArr; timer_timeouts_check_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check_sched
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[25f]"></a>current_int_priority_get</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, app_timer_ble_gzll.o(i.current_int_priority_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = current_int_priority_get
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_id_get
</UL>

<P><STRONG><a name="[254]"></a>elapsed_ticks_acquire</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, app_timer_ble_gzll.o(i.elapsed_ticks_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[255]"></a>expired_timers_handler</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, app_timer_ble_gzll.o(i.expired_timers_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = expired_timers_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[1c6]"></a>list_deletions_handler</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, app_timer_ble_gzll.o(i.list_deletions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = list_deletions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[1c8]"></a>list_insertions_handler</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, app_timer_ble_gzll.o(i.list_insertions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = list_insertions_handler &rArr; timer_list_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_insert
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[cb]"></a>rtc1_counter_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer_ble_gzll.o(i.rtc1_counter_get))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[ca]"></a>rtc1_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_timer_ble_gzll.o(i.rtc1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc1_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[149]"></a>rtc1_start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app_timer_ble_gzll.o(i.rtc1_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc1_start
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___20_app_timer_ble_gzll_c_cd27f9c3__nrf_delay_us
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[c6]"></a>rtc1_stop</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, app_timer_ble_gzll.o(i.rtc1_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___20_app_timer_ble_gzll_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[148]"></a>ticks_diff_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_timer_ble_gzll.o(i.ticks_diff_get))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[253]"></a>timeout_handler_exec</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, app_timer_ble_gzll.o(i.timeout_handler_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = timeout_handler_exec &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>

<P><STRONG><a name="[88]"></a>timer_list_handler</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, app_timer_ble_gzll.o(i.timer_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = timer_list_handler &rArr; list_deletions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_deletions_handler
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expired_timers_handler
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_ticks_acquire
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI1_IRQHandler
</UL>

<P><STRONG><a name="[256]"></a>timer_list_handler_sched</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_timer_ble_gzll.o(i.timer_list_handler_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_handler_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_all_op_schedule
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[1c9]"></a>timer_list_insert</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, app_timer_ble_gzll.o(i.timer_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[1c7]"></a>timer_list_remove</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, app_timer_ble_gzll.o(i.timer_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = timer_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_deletions_handler
</UL>

<P><STRONG><a name="[ce]"></a>timer_start_op_schedule</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, app_timer_ble_gzll.o(i.timer_start_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_enque
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[d2]"></a>timer_stop_all_op_schedule</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, app_timer_ble_gzll.o(i.timer_stop_all_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer_stop_all_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_enque
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop_all
</UL>

<P><STRONG><a name="[d0]"></a>timer_stop_op_schedule</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, app_timer_ble_gzll.o(i.timer_stop_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer_stop_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_enque
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>

<P><STRONG><a name="[7b]"></a>timer_timeouts_check</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, app_timer_ble_gzll.o(i.timer_timeouts_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = timer_timeouts_check &rArr; timeout_handler_exec &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler_exec
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[14a]"></a>timer_timeouts_check_sched</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_timer_ble_gzll.o(i.timer_timeouts_check_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_timeouts_check_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[cd]"></a>user_id_get</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_timer_ble_gzll.o(i.user_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = user_id_get &rArr; current_int_priority_get
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_int_priority_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop_all
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>

<P><STRONG><a name="[258]"></a>user_op_alloc</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, app_timer_ble_gzll.o(i.user_op_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = user_op_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_all_op_schedule
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[259]"></a>user_op_enque</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_timer_ble_gzll.o(i.user_op_enque))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_all_op_schedule
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[7d]"></a>_DoInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigUpBuffer
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigDownBuffer
</UL>

<P><STRONG><a name="[81]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[83]"></a>_WriteBlocking</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[82]"></a>_WriteNoCheck</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, segger_rtt.o(i._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[86]"></a>_PrintInt</STRONG> (Thumb, 270 bytes, Stack size 56 bytes, segger_rtt_printf.o(i._PrintInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>

<P><STRONG><a name="[87]"></a>_PrintUnsigned</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, segger_rtt_printf.o(i._PrintUnsigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>

<P><STRONG><a name="[85]"></a>_StoreChar</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, segger_rtt_printf.o(i._StoreChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>

<P><STRONG><a name="[248]"></a>ram_end_address_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, softdevice_handler.o(i.ram_end_address_get))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_check_ram_start
</UL>

<P><STRONG><a name="[24c]"></a>sd_nvic_EnableIRQ</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, softdevice_handler.o(i.sd_nvic_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sd_nvic_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
</UL>

<P><STRONG><a name="[1ad]"></a>gzp_array_is_set</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nrf_gzp_device - judge.o(i.gzp_array_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gzp_array_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_params_store
</UL>

<P><STRONG><a name="[1a4]"></a>gzp_index_db_add</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, nrf_gzp_device - judge.o(i.gzp_index_db_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = gzp_index_db_add &rArr; nrf_nvmc_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nvmc_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_params_store
</UL>

<P><STRONG><a name="[1aa]"></a>gzp_index_db_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_gzp_device - judge.o(i.gzp_index_db_empty))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_params_restore
</UL>

<P><STRONG><a name="[1a9]"></a>gzp_index_db_full</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_gzp_device - judge.o(i.gzp_index_db_full))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_params_store
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_params_restore
</UL>

<P><STRONG><a name="[1ab]"></a>gzp_index_db_read</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nrf_gzp_device - judge.o(i.gzp_index_db_read))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_params_store
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_params_restore
</UL>

<P><STRONG><a name="[1a6]"></a>gzp_params_db_add</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrf_gzp_device - judge.o(i.gzp_params_db_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gzp_params_db_add &rArr; nrf_nvmc_write_bytes &rArr; nrf_nvmc_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nvmc_write_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_params_store
</UL>

<P><STRONG><a name="[1a8]"></a>gzp_params_db_read</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrf_gzp_device - judge.o(i.gzp_params_db_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gzp_params_db_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_params_store
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_params_restore
</UL>

<P><STRONG><a name="[1a5]"></a>gzp_params_restore</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, nrf_gzp_device - judge.o(i.gzp_params_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gzp_params_restore &rArr; gzp_params_db_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_set_host_id
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_params_db_read
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_index_db_read
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_index_db_full
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_index_db_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_init
</UL>

<P><STRONG><a name="[19c]"></a>gzp_params_store</STRONG> (Thumb, 374 bytes, Stack size 40 bytes, nrf_gzp_device - judge.o(i.gzp_params_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gzp_params_store &rArr; gzp_params_db_add &rArr; nrf_nvmc_write_bytes &rArr; nrf_nvmc_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_params_db_read
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_params_db_add
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_index_db_read
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_index_db_full
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_index_db_add
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_array_is_set
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_address_req_send
</UL>

<P><STRONG><a name="[1ac]"></a>gzp_set_host_id</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_gzp_device - judge.o(i.gzp_set_host_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gzp_set_host_id &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_params_restore
</UL>

<P><STRONG><a name="[196]"></a>gzp_tx_packet</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nrf_gzp_device - judge.o(i.gzp_tx_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gzp_tx_packet &rArr; nrf_gzll_add_packet_to_tx_fifo &rArr; nrf_impl_put_tx_fifo &rArr; nrf_pm_put_tx_fifo &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_add_packet_to_tx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_address_req_send
</UL>

<P><STRONG><a name="[216]"></a>nrf_gzp_set_primask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_gzp_judge.o(i.nrf_gzp_set_primask))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzp_flush_rx_fifo
</UL>

<P><STRONG><a name="[8c]"></a>is_disabled_in_debug_needed</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, system_nrf51.o(i.is_disabled_in_debug_needed))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[8b]"></a>is_manual_peripheral_setup_needed</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, system_nrf51.o(i.is_manual_peripheral_setup_needed))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[8d]"></a>is_peripheral_domain_setup_needed</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf51.o(i.is_peripheral_domain_setup_needed))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[39]"></a>device_ack_received</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, nrf_impala.o(i.device_ack_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = device_ack_received &rArr; nrf_pm_end_ptx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_state
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_current_ptx_pipe
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_current_ptx_packet
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_ptx
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nm_add
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_force_disable
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_task_is_delayed
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_set_current_timeslot
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_get_current_channel_index
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_impala.o(i.nrf_impl_state_fun_timeslot_start)
</UL>
<P><STRONG><a name="[18c]"></a>goto_disable</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, nrf_impala.o(i.goto_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = goto_disable &rArr; nrf_pm_end_prx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sm_set_next_state
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_state
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_ptx
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_prx
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nm_add
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_force_disable
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_stop
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_get_runstate
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[1cc]"></a>m_nrf_impl_restore_all_hw_params</STRONG> (Thumb, 682 bytes, Stack size 24 bytes, nrf_impala.o(i.m_nrf_impl_restore_all_hw_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_nrf_impl_restore_all_hw_params &rArr; nrf_lcore_init &rArr; nrf_lcore_force_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_get_ext_capture_task
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mode
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_enable
</UL>

<P><STRONG><a name="[217]"></a>sm_start</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, nrf_impala.o(i.sm_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sm_start &rArr; NRF_flw_prepare_call &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sm_get_next_state
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_start
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_get_runstate
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_flw_prepare_call
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_mode
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_put_tx_fifo
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_enable
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_disable
</UL>

<P><STRONG><a name="[222]"></a>update_mode</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, nrf_impala.o(i.update_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = update_mode &rArr; nrf_pm_end_prx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_state
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_ptx
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_prx
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nm_add
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_force_disable
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nrf_impl_restore_all_hw_params
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_mode
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
</UL>

<P><STRONG><a name="[7a]"></a>nrf_lcore_handler_rx_enable_start_tx_enable_start_disable</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, nrf_link_core.o(i.nrf_lcore_handler_rx_enable_start_tx_enable_start_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_lcore_handler_rx_enable_start_tx_enable_start_disable &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_IRQHandler
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
